///
/// HybridNitroTextSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Fragment` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct Fragment; }
// Forward declaration of `FontWeight` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class FontWeight; }
// Forward declaration of `FontStyle` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class FontStyle; }
// Forward declaration of `TextAlign` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextAlign; }
// Forward declaration of `TextTransform` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextTransform; }

#include "Fragment.hpp"
#include <vector>
#include <optional>
#include <functional>
#include "FontWeight.hpp"
#include <string>
#include "FontStyle.hpp"
#include "TextAlign.hpp"
#include "TextTransform.hpp"

namespace margelo::nitro::nitrotext {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroText`
   * Inherit this class to create instances of `HybridNitroTextSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroText: public HybridNitroTextSpec {
   * public:
   *   HybridNitroText(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroTextSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroTextSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroTextSpec() override = default;

    public:
      // Properties
      virtual std::optional<std::vector<Fragment>> getFragments() = 0;
      virtual void setFragments(const std::optional<std::vector<Fragment>>& fragments) = 0;
      virtual std::optional<bool> getSelectable() = 0;
      virtual void setSelectable(std::optional<bool> selectable) = 0;
      virtual std::optional<std::function<void(double /* height */)>> getOnSelectableTextMeasured() = 0;
      virtual void setOnSelectableTextMeasured(const std::optional<std::function<void(double /* height */)>>& onSelectableTextMeasured) = 0;
      virtual std::optional<double> getFontSize() = 0;
      virtual void setFontSize(std::optional<double> fontSize) = 0;
      virtual std::optional<FontWeight> getFontWeight() = 0;
      virtual void setFontWeight(std::optional<FontWeight> fontWeight) = 0;
      virtual std::optional<std::string> getFontColor() = 0;
      virtual void setFontColor(const std::optional<std::string>& fontColor) = 0;
      virtual std::optional<FontStyle> getFontStyle() = 0;
      virtual void setFontStyle(std::optional<FontStyle> fontStyle) = 0;
      virtual std::optional<double> getLineHeight() = 0;
      virtual void setLineHeight(std::optional<double> lineHeight) = 0;
      virtual std::optional<std::string> getText() = 0;
      virtual void setText(const std::optional<std::string>& text) = 0;
      virtual std::optional<double> getNumberOfLines() = 0;
      virtual void setNumberOfLines(std::optional<double> numberOfLines) = 0;
      virtual std::optional<TextAlign> getTextAlign() = 0;
      virtual void setTextAlign(std::optional<TextAlign> textAlign) = 0;
      virtual std::optional<TextTransform> getTextTransform() = 0;
      virtual void setTextTransform(std::optional<TextTransform> textTransform) = 0;

    public:
      // Methods
      

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroText";
  };

} // namespace margelo::nitro::nitrotext
