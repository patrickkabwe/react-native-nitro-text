///
/// DynamicTypeRamp.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrotext {

  /**
   * An enum which can be represented as a JavaScript union (DynamicTypeRamp).
   */
  enum class DynamicTypeRamp {
    CAPTION2      SWIFT_NAME(caption2) = 0,
    CAPTION1      SWIFT_NAME(caption1) = 1,
    FOOTNOTE      SWIFT_NAME(footnote) = 2,
    SUBHEADLINE      SWIFT_NAME(subheadline) = 3,
    CALLOUT      SWIFT_NAME(callout) = 4,
    BODY      SWIFT_NAME(body) = 5,
    HEADLINE      SWIFT_NAME(headline) = 6,
    TITLE3      SWIFT_NAME(title3) = 7,
    TITLE2      SWIFT_NAME(title2) = 8,
    TITLE1      SWIFT_NAME(title1) = 9,
    LARGETITLE      SWIFT_NAME(largetitle) = 10,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrotext

namespace margelo::nitro {

  // C++ DynamicTypeRamp <> JS DynamicTypeRamp (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrotext::DynamicTypeRamp> final {
    static inline margelo::nitro::nitrotext::DynamicTypeRamp fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("caption2"): return margelo::nitro::nitrotext::DynamicTypeRamp::CAPTION2;
        case hashString("caption1"): return margelo::nitro::nitrotext::DynamicTypeRamp::CAPTION1;
        case hashString("footnote"): return margelo::nitro::nitrotext::DynamicTypeRamp::FOOTNOTE;
        case hashString("subheadline"): return margelo::nitro::nitrotext::DynamicTypeRamp::SUBHEADLINE;
        case hashString("callout"): return margelo::nitro::nitrotext::DynamicTypeRamp::CALLOUT;
        case hashString("body"): return margelo::nitro::nitrotext::DynamicTypeRamp::BODY;
        case hashString("headline"): return margelo::nitro::nitrotext::DynamicTypeRamp::HEADLINE;
        case hashString("title3"): return margelo::nitro::nitrotext::DynamicTypeRamp::TITLE3;
        case hashString("title2"): return margelo::nitro::nitrotext::DynamicTypeRamp::TITLE2;
        case hashString("title1"): return margelo::nitro::nitrotext::DynamicTypeRamp::TITLE1;
        case hashString("largeTitle"): return margelo::nitro::nitrotext::DynamicTypeRamp::LARGETITLE;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum DynamicTypeRamp - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrotext::DynamicTypeRamp arg) {
      switch (arg) {
        case margelo::nitro::nitrotext::DynamicTypeRamp::CAPTION2: return JSIConverter<std::string>::toJSI(runtime, "caption2");
        case margelo::nitro::nitrotext::DynamicTypeRamp::CAPTION1: return JSIConverter<std::string>::toJSI(runtime, "caption1");
        case margelo::nitro::nitrotext::DynamicTypeRamp::FOOTNOTE: return JSIConverter<std::string>::toJSI(runtime, "footnote");
        case margelo::nitro::nitrotext::DynamicTypeRamp::SUBHEADLINE: return JSIConverter<std::string>::toJSI(runtime, "subheadline");
        case margelo::nitro::nitrotext::DynamicTypeRamp::CALLOUT: return JSIConverter<std::string>::toJSI(runtime, "callout");
        case margelo::nitro::nitrotext::DynamicTypeRamp::BODY: return JSIConverter<std::string>::toJSI(runtime, "body");
        case margelo::nitro::nitrotext::DynamicTypeRamp::HEADLINE: return JSIConverter<std::string>::toJSI(runtime, "headline");
        case margelo::nitro::nitrotext::DynamicTypeRamp::TITLE3: return JSIConverter<std::string>::toJSI(runtime, "title3");
        case margelo::nitro::nitrotext::DynamicTypeRamp::TITLE2: return JSIConverter<std::string>::toJSI(runtime, "title2");
        case margelo::nitro::nitrotext::DynamicTypeRamp::TITLE1: return JSIConverter<std::string>::toJSI(runtime, "title1");
        case margelo::nitro::nitrotext::DynamicTypeRamp::LARGETITLE: return JSIConverter<std::string>::toJSI(runtime, "largeTitle");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert DynamicTypeRamp to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("caption2"):
        case hashString("caption1"):
        case hashString("footnote"):
        case hashString("subheadline"):
        case hashString("callout"):
        case hashString("body"):
        case hashString("headline"):
        case hashString("title3"):
        case hashString("title2"):
        case hashString("title1"):
        case hashString("largeTitle"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
