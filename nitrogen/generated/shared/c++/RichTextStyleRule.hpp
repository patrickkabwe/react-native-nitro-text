///
/// RichTextStyleRule.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `RichTextStyle` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct RichTextStyle; }

#include <string>
#include "RichTextStyle.hpp"

namespace margelo::nitro::nitrotext {

  /**
   * A struct which can be represented as a JavaScript object (RichTextStyleRule).
   */
  struct RichTextStyleRule {
  public:
    std::string selector     SWIFT_PRIVATE;
    RichTextStyle style     SWIFT_PRIVATE;

  public:
    RichTextStyleRule() = default;
    explicit RichTextStyleRule(std::string selector, RichTextStyle style): selector(selector), style(style) {}
  };

} // namespace margelo::nitro::nitrotext

namespace margelo::nitro {

  // C++ RichTextStyleRule <> JS RichTextStyleRule (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrotext::RichTextStyleRule> final {
    static inline margelo::nitro::nitrotext::RichTextStyleRule fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrotext::RichTextStyleRule(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "selector")),
        JSIConverter<margelo::nitro::nitrotext::RichTextStyle>::fromJSI(runtime, obj.getProperty(runtime, "style"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrotext::RichTextStyleRule& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "selector", JSIConverter<std::string>::toJSI(runtime, arg.selector));
      obj.setProperty(runtime, "style", JSIConverter<margelo::nitro::nitrotext::RichTextStyle>::toJSI(runtime, arg.style));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "selector"))) return false;
      if (!JSIConverter<margelo::nitro::nitrotext::RichTextStyle>::canConvert(runtime, obj.getProperty(runtime, "style"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
