///
/// TextDecorationLine.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrotext {

  /**
   * An enum which can be represented as a JavaScript union (TextDecorationLine).
   */
  enum class TextDecorationLine {
    NONE      SWIFT_NAME(none) = 0,
    UNDERLINE      SWIFT_NAME(underline) = 1,
    LINE_THROUGH      SWIFT_NAME(lineThrough) = 2,
    UNDERLINE_LINE_THROUGH      SWIFT_NAME(underlineLineThrough) = 3,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrotext

namespace margelo::nitro {

  // C++ TextDecorationLine <> JS TextDecorationLine (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrotext::TextDecorationLine> final {
    static inline margelo::nitro::nitrotext::TextDecorationLine fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("none"): return margelo::nitro::nitrotext::TextDecorationLine::NONE;
        case hashString("underline"): return margelo::nitro::nitrotext::TextDecorationLine::UNDERLINE;
        case hashString("line-through"): return margelo::nitro::nitrotext::TextDecorationLine::LINE_THROUGH;
        case hashString("underline line-through"): return margelo::nitro::nitrotext::TextDecorationLine::UNDERLINE_LINE_THROUGH;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum TextDecorationLine - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrotext::TextDecorationLine arg) {
      switch (arg) {
        case margelo::nitro::nitrotext::TextDecorationLine::NONE: return JSIConverter<std::string>::toJSI(runtime, "none");
        case margelo::nitro::nitrotext::TextDecorationLine::UNDERLINE: return JSIConverter<std::string>::toJSI(runtime, "underline");
        case margelo::nitro::nitrotext::TextDecorationLine::LINE_THROUGH: return JSIConverter<std::string>::toJSI(runtime, "line-through");
        case margelo::nitro::nitrotext::TextDecorationLine::UNDERLINE_LINE_THROUGH: return JSIConverter<std::string>::toJSI(runtime, "underline line-through");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert TextDecorationLine to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("none"):
        case hashString("underline"):
        case hashString("line-through"):
        case hashString("underline line-through"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
