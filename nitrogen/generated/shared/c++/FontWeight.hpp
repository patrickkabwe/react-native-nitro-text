///
/// FontWeight.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrotext {

  /**
   * An enum which can be represented as a JavaScript union (FontWeight).
   */
  enum class FontWeight {
    NORMAL      SWIFT_NAME(normal) = 0,
    BOLD      SWIFT_NAME(bold) = 1,
    ULTRALIGHT      SWIFT_NAME(ultralight) = 2,
    THIN      SWIFT_NAME(thin) = 3,
    LIGHT      SWIFT_NAME(light) = 4,
    MEDIUM      SWIFT_NAME(medium) = 5,
    REGULAR      SWIFT_NAME(regular) = 6,
    SEMIBOLD      SWIFT_NAME(semibold) = 7,
    CONDENSEDBOLD      SWIFT_NAME(condensedbold) = 8,
    CONDENSED      SWIFT_NAME(condensed) = 9,
    HEAVY      SWIFT_NAME(heavy) = 10,
    BLACK      SWIFT_NAME(black) = 11,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrotext

namespace margelo::nitro {

  // C++ FontWeight <> JS FontWeight (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrotext::FontWeight> final {
    static inline margelo::nitro::nitrotext::FontWeight fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("normal"): return margelo::nitro::nitrotext::FontWeight::NORMAL;
        case hashString("bold"): return margelo::nitro::nitrotext::FontWeight::BOLD;
        case hashString("ultralight"): return margelo::nitro::nitrotext::FontWeight::ULTRALIGHT;
        case hashString("thin"): return margelo::nitro::nitrotext::FontWeight::THIN;
        case hashString("light"): return margelo::nitro::nitrotext::FontWeight::LIGHT;
        case hashString("medium"): return margelo::nitro::nitrotext::FontWeight::MEDIUM;
        case hashString("regular"): return margelo::nitro::nitrotext::FontWeight::REGULAR;
        case hashString("semibold"): return margelo::nitro::nitrotext::FontWeight::SEMIBOLD;
        case hashString("condensedBold"): return margelo::nitro::nitrotext::FontWeight::CONDENSEDBOLD;
        case hashString("condensed"): return margelo::nitro::nitrotext::FontWeight::CONDENSED;
        case hashString("heavy"): return margelo::nitro::nitrotext::FontWeight::HEAVY;
        case hashString("black"): return margelo::nitro::nitrotext::FontWeight::BLACK;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum FontWeight - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrotext::FontWeight arg) {
      switch (arg) {
        case margelo::nitro::nitrotext::FontWeight::NORMAL: return JSIConverter<std::string>::toJSI(runtime, "normal");
        case margelo::nitro::nitrotext::FontWeight::BOLD: return JSIConverter<std::string>::toJSI(runtime, "bold");
        case margelo::nitro::nitrotext::FontWeight::ULTRALIGHT: return JSIConverter<std::string>::toJSI(runtime, "ultralight");
        case margelo::nitro::nitrotext::FontWeight::THIN: return JSIConverter<std::string>::toJSI(runtime, "thin");
        case margelo::nitro::nitrotext::FontWeight::LIGHT: return JSIConverter<std::string>::toJSI(runtime, "light");
        case margelo::nitro::nitrotext::FontWeight::MEDIUM: return JSIConverter<std::string>::toJSI(runtime, "medium");
        case margelo::nitro::nitrotext::FontWeight::REGULAR: return JSIConverter<std::string>::toJSI(runtime, "regular");
        case margelo::nitro::nitrotext::FontWeight::SEMIBOLD: return JSIConverter<std::string>::toJSI(runtime, "semibold");
        case margelo::nitro::nitrotext::FontWeight::CONDENSEDBOLD: return JSIConverter<std::string>::toJSI(runtime, "condensedBold");
        case margelo::nitro::nitrotext::FontWeight::CONDENSED: return JSIConverter<std::string>::toJSI(runtime, "condensed");
        case margelo::nitro::nitrotext::FontWeight::HEAVY: return JSIConverter<std::string>::toJSI(runtime, "heavy");
        case margelo::nitro::nitrotext::FontWeight::BLACK: return JSIConverter<std::string>::toJSI(runtime, "black");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert FontWeight to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("normal"):
        case hashString("bold"):
        case hashString("ultralight"):
        case hashString("thin"):
        case hashString("light"):
        case hashString("medium"):
        case hashString("regular"):
        case hashString("semibold"):
        case hashString("condensedBold"):
        case hashString("condensed"):
        case hashString("heavy"):
        case hashString("black"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
