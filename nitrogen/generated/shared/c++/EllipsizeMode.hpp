///
/// EllipsizeMode.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrotext {

  /**
   * An enum which can be represented as a JavaScript union (EllipsizeMode).
   */
  enum class EllipsizeMode {
    HEAD      SWIFT_NAME(head) = 0,
    MIDDLE      SWIFT_NAME(middle) = 1,
    TAIL      SWIFT_NAME(tail) = 2,
    CLIP      SWIFT_NAME(clip) = 3,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrotext

namespace margelo::nitro {

  // C++ EllipsizeMode <> JS EllipsizeMode (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrotext::EllipsizeMode> final {
    static inline margelo::nitro::nitrotext::EllipsizeMode fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("head"): return margelo::nitro::nitrotext::EllipsizeMode::HEAD;
        case hashString("middle"): return margelo::nitro::nitrotext::EllipsizeMode::MIDDLE;
        case hashString("tail"): return margelo::nitro::nitrotext::EllipsizeMode::TAIL;
        case hashString("clip"): return margelo::nitro::nitrotext::EllipsizeMode::CLIP;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum EllipsizeMode - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrotext::EllipsizeMode arg) {
      switch (arg) {
        case margelo::nitro::nitrotext::EllipsizeMode::HEAD: return JSIConverter<std::string>::toJSI(runtime, "head");
        case margelo::nitro::nitrotext::EllipsizeMode::MIDDLE: return JSIConverter<std::string>::toJSI(runtime, "middle");
        case margelo::nitro::nitrotext::EllipsizeMode::TAIL: return JSIConverter<std::string>::toJSI(runtime, "tail");
        case margelo::nitro::nitrotext::EllipsizeMode::CLIP: return JSIConverter<std::string>::toJSI(runtime, "clip");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert EllipsizeMode to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("head"):
        case hashString("middle"):
        case hashString("tail"):
        case hashString("clip"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
