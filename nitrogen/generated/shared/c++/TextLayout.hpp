///
/// TextLayout.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitrotext {

  /**
   * A struct which can be represented as a JavaScript object (TextLayout).
   */
  struct TextLayout {
  public:
    std::string text     SWIFT_PRIVATE;
    double x     SWIFT_PRIVATE;
    double y     SWIFT_PRIVATE;
    double width     SWIFT_PRIVATE;
    double height     SWIFT_PRIVATE;
    double descender     SWIFT_PRIVATE;
    double capHeight     SWIFT_PRIVATE;
    double ascender     SWIFT_PRIVATE;
    double xHeight     SWIFT_PRIVATE;

  public:
    TextLayout() = default;
    explicit TextLayout(std::string text, double x, double y, double width, double height, double descender, double capHeight, double ascender, double xHeight): text(text), x(x), y(y), width(width), height(height), descender(descender), capHeight(capHeight), ascender(ascender), xHeight(xHeight) {}
  };

} // namespace margelo::nitro::nitrotext

namespace margelo::nitro {

  // C++ TextLayout <> JS TextLayout (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrotext::TextLayout> final {
    static inline margelo::nitro::nitrotext::TextLayout fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrotext::TextLayout(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "text")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "x")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "y")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "width")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "height")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "descender")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "capHeight")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "ascender")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "xHeight"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrotext::TextLayout& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "text", JSIConverter<std::string>::toJSI(runtime, arg.text));
      obj.setProperty(runtime, "x", JSIConverter<double>::toJSI(runtime, arg.x));
      obj.setProperty(runtime, "y", JSIConverter<double>::toJSI(runtime, arg.y));
      obj.setProperty(runtime, "width", JSIConverter<double>::toJSI(runtime, arg.width));
      obj.setProperty(runtime, "height", JSIConverter<double>::toJSI(runtime, arg.height));
      obj.setProperty(runtime, "descender", JSIConverter<double>::toJSI(runtime, arg.descender));
      obj.setProperty(runtime, "capHeight", JSIConverter<double>::toJSI(runtime, arg.capHeight));
      obj.setProperty(runtime, "ascender", JSIConverter<double>::toJSI(runtime, arg.ascender));
      obj.setProperty(runtime, "xHeight", JSIConverter<double>::toJSI(runtime, arg.xHeight));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "text"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "x"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "y"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "width"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "height"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "descender"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "capHeight"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "ascender"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "xHeight"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
