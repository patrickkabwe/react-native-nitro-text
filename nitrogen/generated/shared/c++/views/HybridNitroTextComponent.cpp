///
/// HybridNitroTextComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridNitroTextComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::nitrotext::views {

  extern const char HybridNitroTextComponentName[] = "NitroText";

  HybridNitroTextProps::HybridNitroTextProps(const react::PropsParserContext& context,
                                             const HybridNitroTextProps& sourceProps,
                                             const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    fragments([&]() -> CachedProp<std::optional<std::vector<Fragment>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fragments", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fragments;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::vector<Fragment>>>::fromRawValue(*runtime, value, sourceProps.fragments);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fragments: ") + exc.what());
      }
    }()),
    renderer([&]() -> CachedProp<std::optional<NitroRenderer>> {
      try {
        const react::RawValue* rawValue = rawProps.at("renderer", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.renderer;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<NitroRenderer>>::fromRawValue(*runtime, value, sourceProps.renderer);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.renderer: ") + exc.what());
      }
    }()),
    richTextStyleRules([&]() -> CachedProp<std::optional<std::vector<RichTextStyleRule>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("richTextStyleRules", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.richTextStyleRules;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::vector<RichTextStyleRule>>>::fromRawValue(*runtime, value, sourceProps.richTextStyleRules);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.richTextStyleRules: ") + exc.what());
      }
    }()),
    selectable([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("selectable", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.selectable;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.selectable);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.selectable: ") + exc.what());
      }
    }()),
    allowFontScaling([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("allowFontScaling", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.allowFontScaling;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.allowFontScaling);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.allowFontScaling: ") + exc.what());
      }
    }()),
    ellipsizeMode([&]() -> CachedProp<std::optional<EllipsizeMode>> {
      try {
        const react::RawValue* rawValue = rawProps.at("ellipsizeMode", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.ellipsizeMode;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<EllipsizeMode>>::fromRawValue(*runtime, value, sourceProps.ellipsizeMode);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.ellipsizeMode: ") + exc.what());
      }
    }()),
    numberOfLines([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("numberOfLines", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.numberOfLines;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.numberOfLines);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.numberOfLines: ") + exc.what());
      }
    }()),
    lineBreakStrategyIOS([&]() -> CachedProp<std::optional<LineBreakStrategyIOS>> {
      try {
        const react::RawValue* rawValue = rawProps.at("lineBreakStrategyIOS", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.lineBreakStrategyIOS;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<LineBreakStrategyIOS>>::fromRawValue(*runtime, value, sourceProps.lineBreakStrategyIOS);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.lineBreakStrategyIOS: ") + exc.what());
      }
    }()),
    dynamicTypeRamp([&]() -> CachedProp<std::optional<DynamicTypeRamp>> {
      try {
        const react::RawValue* rawValue = rawProps.at("dynamicTypeRamp", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.dynamicTypeRamp;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<DynamicTypeRamp>>::fromRawValue(*runtime, value, sourceProps.dynamicTypeRamp);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.dynamicTypeRamp: ") + exc.what());
      }
    }()),
    maxFontSizeMultiplier([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("maxFontSizeMultiplier", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.maxFontSizeMultiplier;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.maxFontSizeMultiplier);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.maxFontSizeMultiplier: ") + exc.what());
      }
    }()),
    adjustsFontSizeToFit([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("adjustsFontSizeToFit", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.adjustsFontSizeToFit;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.adjustsFontSizeToFit);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.adjustsFontSizeToFit: ") + exc.what());
      }
    }()),
    minimumFontScale([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("minimumFontScale", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.minimumFontScale;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.minimumFontScale);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.minimumFontScale: ") + exc.what());
      }
    }()),
    onTextLayout([&]() -> CachedProp<std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onTextLayout", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onTextLayout;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onTextLayout);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.onTextLayout: ") + exc.what());
      }
    }()),
    onPress([&]() -> CachedProp<std::optional<std::function<void()>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onPress", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onPress;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void()>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onPress);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.onPress: ") + exc.what());
      }
    }()),
    onPressIn([&]() -> CachedProp<std::optional<std::function<void()>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onPressIn", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onPressIn;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void()>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onPressIn);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.onPressIn: ") + exc.what());
      }
    }()),
    onPressOut([&]() -> CachedProp<std::optional<std::function<void()>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onPressOut", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onPressOut;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void()>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onPressOut);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.onPressOut: ") + exc.what());
      }
    }()),
    text([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("text", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.text;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.text);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.text: ") + exc.what());
      }
    }()),
    selectionColor([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("selectionColor", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.selectionColor;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.selectionColor);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.selectionColor: ") + exc.what());
      }
    }()),
    fontSize([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontSize", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontSize;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.fontSize);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontSize: ") + exc.what());
      }
    }()),
    fontWeight([&]() -> CachedProp<std::optional<FontWeight>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontWeight", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontWeight;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<FontWeight>>::fromRawValue(*runtime, value, sourceProps.fontWeight);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontWeight: ") + exc.what());
      }
    }()),
    fontColor([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontColor", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontColor;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.fontColor);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontColor: ") + exc.what());
      }
    }()),
    fragmentBackgroundColor([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fragmentBackgroundColor", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fragmentBackgroundColor;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.fragmentBackgroundColor);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fragmentBackgroundColor: ") + exc.what());
      }
    }()),
    fontStyle([&]() -> CachedProp<std::optional<FontStyle>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontStyle", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontStyle;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<FontStyle>>::fromRawValue(*runtime, value, sourceProps.fontStyle);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontStyle: ") + exc.what());
      }
    }()),
    fontFamily([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontFamily", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontFamily;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.fontFamily);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontFamily: ") + exc.what());
      }
    }()),
    lineHeight([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("lineHeight", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.lineHeight;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.lineHeight);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.lineHeight: ") + exc.what());
      }
    }()),
    letterSpacing([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("letterSpacing", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.letterSpacing;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.letterSpacing);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.letterSpacing: ") + exc.what());
      }
    }()),
    textAlign([&]() -> CachedProp<std::optional<TextAlign>> {
      try {
        const react::RawValue* rawValue = rawProps.at("textAlign", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.textAlign;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextAlign>>::fromRawValue(*runtime, value, sourceProps.textAlign);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.textAlign: ") + exc.what());
      }
    }()),
    textTransform([&]() -> CachedProp<std::optional<TextTransform>> {
      try {
        const react::RawValue* rawValue = rawProps.at("textTransform", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.textTransform;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextTransform>>::fromRawValue(*runtime, value, sourceProps.textTransform);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.textTransform: ") + exc.what());
      }
    }()),
    textDecorationLine([&]() -> CachedProp<std::optional<TextDecorationLine>> {
      try {
        const react::RawValue* rawValue = rawProps.at("textDecorationLine", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.textDecorationLine;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextDecorationLine>>::fromRawValue(*runtime, value, sourceProps.textDecorationLine);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.textDecorationLine: ") + exc.what());
      }
    }()),
    textDecorationColor([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("textDecorationColor", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.textDecorationColor;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.textDecorationColor);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.textDecorationColor: ") + exc.what());
      }
    }()),
    textDecorationStyle([&]() -> CachedProp<std::optional<TextDecorationStyle>> {
      try {
        const react::RawValue* rawValue = rawProps.at("textDecorationStyle", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.textDecorationStyle;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextDecorationStyle>>::fromRawValue(*runtime, value, sourceProps.textDecorationStyle);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.textDecorationStyle: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridNitroTextSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridNitroTextSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridNitroTextProps::HybridNitroTextProps(const HybridNitroTextProps& other):
    react::ViewProps(),
    fragments(other.fragments),
    renderer(other.renderer),
    richTextStyleRules(other.richTextStyleRules),
    selectable(other.selectable),
    allowFontScaling(other.allowFontScaling),
    ellipsizeMode(other.ellipsizeMode),
    numberOfLines(other.numberOfLines),
    lineBreakStrategyIOS(other.lineBreakStrategyIOS),
    dynamicTypeRamp(other.dynamicTypeRamp),
    maxFontSizeMultiplier(other.maxFontSizeMultiplier),
    adjustsFontSizeToFit(other.adjustsFontSizeToFit),
    minimumFontScale(other.minimumFontScale),
    onTextLayout(other.onTextLayout),
    onPress(other.onPress),
    onPressIn(other.onPressIn),
    onPressOut(other.onPressOut),
    text(other.text),
    selectionColor(other.selectionColor),
    fontSize(other.fontSize),
    fontWeight(other.fontWeight),
    fontColor(other.fontColor),
    fragmentBackgroundColor(other.fragmentBackgroundColor),
    fontStyle(other.fontStyle),
    fontFamily(other.fontFamily),
    lineHeight(other.lineHeight),
    letterSpacing(other.letterSpacing),
    textAlign(other.textAlign),
    textTransform(other.textTransform),
    textDecorationLine(other.textDecorationLine),
    textDecorationColor(other.textDecorationColor),
    textDecorationStyle(other.textDecorationStyle),
    hybridRef(other.hybridRef) { }

  bool HybridNitroTextProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("fragments"): return true;
      case hashString("renderer"): return true;
      case hashString("richTextStyleRules"): return true;
      case hashString("selectable"): return true;
      case hashString("allowFontScaling"): return true;
      case hashString("ellipsizeMode"): return true;
      case hashString("numberOfLines"): return true;
      case hashString("lineBreakStrategyIOS"): return true;
      case hashString("dynamicTypeRamp"): return true;
      case hashString("maxFontSizeMultiplier"): return true;
      case hashString("adjustsFontSizeToFit"): return true;
      case hashString("minimumFontScale"): return true;
      case hashString("onTextLayout"): return true;
      case hashString("onPress"): return true;
      case hashString("onPressIn"): return true;
      case hashString("onPressOut"): return true;
      case hashString("text"): return true;
      case hashString("selectionColor"): return true;
      case hashString("fontSize"): return true;
      case hashString("fontWeight"): return true;
      case hashString("fontColor"): return true;
      case hashString("fragmentBackgroundColor"): return true;
      case hashString("fontStyle"): return true;
      case hashString("fontFamily"): return true;
      case hashString("lineHeight"): return true;
      case hashString("letterSpacing"): return true;
      case hashString("textAlign"): return true;
      case hashString("textTransform"): return true;
      case hashString("textDecorationLine"): return true;
      case hashString("textDecorationColor"): return true;
      case hashString("textDecorationStyle"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridNitroTextComponentDescriptor::HybridNitroTextComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  std::shared_ptr<const react::Props> HybridNitroTextComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                                     const std::shared_ptr<const react::Props>& props,
                                                                                     react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridNitroTextShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridNitroTextComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridNitroTextShadowNode&>(shadowNode);
    const HybridNitroTextProps& props = concreteShadowNode.getConcreteProps();
    HybridNitroTextState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::nitrotext::views
