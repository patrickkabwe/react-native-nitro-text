///
/// HybridNitroTextComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridNitroTextComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::nitrotext::views {

  extern const char HybridNitroTextComponentName[] = "NitroText";

  HybridNitroTextProps::HybridNitroTextProps(const react::PropsParserContext& context,
                                             const HybridNitroTextProps& sourceProps,
                                             const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    selectable([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("selectable", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.selectable;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.selectable);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.selectable: ") + exc.what());
      }
    }()),
    fragments([&]() -> CachedProp<std::optional<std::vector<Fragment>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fragments", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fragments;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::vector<Fragment>>>::fromRawValue(*runtime, value, sourceProps.fragments);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fragments: ") + exc.what());
      }
    }()),
    onSelectableTextMeasured([&]() -> CachedProp<std::optional<std::function<void(double /* height */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onSelectableTextMeasured", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onSelectableTextMeasured;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(double /* height */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onSelectableTextMeasured);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.onSelectableTextMeasured: ") + exc.what());
      }
    }()),
    fontSize([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontSize", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontSize;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.fontSize);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontSize: ") + exc.what());
      }
    }()),
    fontWeight([&]() -> CachedProp<std::optional<FontWeight>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontWeight", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontWeight;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<FontWeight>>::fromRawValue(*runtime, value, sourceProps.fontWeight);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontWeight: ") + exc.what());
      }
    }()),
    fontColor([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontColor", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontColor;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.fontColor);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontColor: ") + exc.what());
      }
    }()),
    fontStyle([&]() -> CachedProp<std::optional<FontStyle>> {
      try {
        const react::RawValue* rawValue = rawProps.at("fontStyle", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.fontStyle;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<FontStyle>>::fromRawValue(*runtime, value, sourceProps.fontStyle);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.fontStyle: ") + exc.what());
      }
    }()),
    lineHeight([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("lineHeight", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.lineHeight;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.lineHeight);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.lineHeight: ") + exc.what());
      }
    }()),
    text([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("text", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.text;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.text);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.text: ") + exc.what());
      }
    }()),
    numberOfLines([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("numberOfLines", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.numberOfLines;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.numberOfLines);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.numberOfLines: ") + exc.what());
      }
    }()),
    textAlign([&]() -> CachedProp<std::optional<TextAlign>> {
      try {
        const react::RawValue* rawValue = rawProps.at("textAlign", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.textAlign;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextAlign>>::fromRawValue(*runtime, value, sourceProps.textAlign);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.textAlign: ") + exc.what());
      }
    }()),
    textTransform([&]() -> CachedProp<std::optional<TextTransform>> {
      try {
        const react::RawValue* rawValue = rawProps.at("textTransform", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.textTransform;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextTransform>>::fromRawValue(*runtime, value, sourceProps.textTransform);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.textTransform: ") + exc.what());
      }
    }()),
    ellipsizeMode([&]() -> CachedProp<std::optional<EllipsizeMode>> {
      try {
        const react::RawValue* rawValue = rawProps.at("ellipsizeMode", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.ellipsizeMode;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<EllipsizeMode>>::fromRawValue(*runtime, value, sourceProps.ellipsizeMode);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.ellipsizeMode: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridNitroTextSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridNitroTextSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroText.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridNitroTextProps::HybridNitroTextProps(const HybridNitroTextProps& other):
    react::ViewProps(),
    selectable(other.selectable),
    fragments(other.fragments),
    onSelectableTextMeasured(other.onSelectableTextMeasured),
    fontSize(other.fontSize),
    fontWeight(other.fontWeight),
    fontColor(other.fontColor),
    fontStyle(other.fontStyle),
    lineHeight(other.lineHeight),
    text(other.text),
    numberOfLines(other.numberOfLines),
    textAlign(other.textAlign),
    textTransform(other.textTransform),
    ellipsizeMode(other.ellipsizeMode),
    hybridRef(other.hybridRef) { }

  bool HybridNitroTextProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("selectable"): return true;
      case hashString("fragments"): return true;
      case hashString("onSelectableTextMeasured"): return true;
      case hashString("fontSize"): return true;
      case hashString("fontWeight"): return true;
      case hashString("fontColor"): return true;
      case hashString("fontStyle"): return true;
      case hashString("lineHeight"): return true;
      case hashString("text"): return true;
      case hashString("numberOfLines"): return true;
      case hashString("textAlign"): return true;
      case hashString("textTransform"): return true;
      case hashString("ellipsizeMode"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridNitroTextComponentDescriptor::HybridNitroTextComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  std::shared_ptr<const react::Props> HybridNitroTextComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                                     const std::shared_ptr<const react::Props>& props,
                                                                                     react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridNitroTextShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridNitroTextComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridNitroTextShadowNode&>(shadowNode);
    const HybridNitroTextProps& props = concreteShadowNode.getConcreteProps();
    HybridNitroTextState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::nitrotext::views
