///
/// JDynamicTypeRamp.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "DynamicTypeRamp.hpp"

namespace margelo::nitro::nitrotext {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "DynamicTypeRamp" and the the Kotlin enum "DynamicTypeRamp".
   */
  struct JDynamicTypeRamp final: public jni::JavaClass<JDynamicTypeRamp> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotext/DynamicTypeRamp;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum DynamicTypeRamp.
     */
    [[maybe_unused]]
    [[nodiscard]]
    DynamicTypeRamp toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<DynamicTypeRamp>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JDynamicTypeRamp> fromCpp(DynamicTypeRamp value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldCAPTION2 = clazz->getStaticField<JDynamicTypeRamp>("CAPTION2");
      static const auto fieldCAPTION1 = clazz->getStaticField<JDynamicTypeRamp>("CAPTION1");
      static const auto fieldFOOTNOTE = clazz->getStaticField<JDynamicTypeRamp>("FOOTNOTE");
      static const auto fieldSUBHEADLINE = clazz->getStaticField<JDynamicTypeRamp>("SUBHEADLINE");
      static const auto fieldCALLOUT = clazz->getStaticField<JDynamicTypeRamp>("CALLOUT");
      static const auto fieldBODY = clazz->getStaticField<JDynamicTypeRamp>("BODY");
      static const auto fieldHEADLINE = clazz->getStaticField<JDynamicTypeRamp>("HEADLINE");
      static const auto fieldTITLE3 = clazz->getStaticField<JDynamicTypeRamp>("TITLE3");
      static const auto fieldTITLE2 = clazz->getStaticField<JDynamicTypeRamp>("TITLE2");
      static const auto fieldTITLE1 = clazz->getStaticField<JDynamicTypeRamp>("TITLE1");
      static const auto fieldLARGETITLE = clazz->getStaticField<JDynamicTypeRamp>("LARGETITLE");
      
      switch (value) {
        case DynamicTypeRamp::CAPTION2:
          return clazz->getStaticFieldValue(fieldCAPTION2);
        case DynamicTypeRamp::CAPTION1:
          return clazz->getStaticFieldValue(fieldCAPTION1);
        case DynamicTypeRamp::FOOTNOTE:
          return clazz->getStaticFieldValue(fieldFOOTNOTE);
        case DynamicTypeRamp::SUBHEADLINE:
          return clazz->getStaticFieldValue(fieldSUBHEADLINE);
        case DynamicTypeRamp::CALLOUT:
          return clazz->getStaticFieldValue(fieldCALLOUT);
        case DynamicTypeRamp::BODY:
          return clazz->getStaticFieldValue(fieldBODY);
        case DynamicTypeRamp::HEADLINE:
          return clazz->getStaticFieldValue(fieldHEADLINE);
        case DynamicTypeRamp::TITLE3:
          return clazz->getStaticFieldValue(fieldTITLE3);
        case DynamicTypeRamp::TITLE2:
          return clazz->getStaticFieldValue(fieldTITLE2);
        case DynamicTypeRamp::TITLE1:
          return clazz->getStaticFieldValue(fieldTITLE1);
        case DynamicTypeRamp::LARGETITLE:
          return clazz->getStaticFieldValue(fieldLARGETITLE);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotext
