///
/// JFontWeight.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "FontWeight.hpp"

namespace margelo::nitro::nitrotext {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "FontWeight" and the the Kotlin enum "FontWeight".
   */
  struct JFontWeight final: public jni::JavaClass<JFontWeight> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotext/FontWeight;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum FontWeight.
     */
    [[maybe_unused]]
    [[nodiscard]]
    FontWeight toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<FontWeight>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JFontWeight> fromCpp(FontWeight value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldNORMAL = clazz->getStaticField<JFontWeight>("NORMAL");
      static const auto fieldBOLD = clazz->getStaticField<JFontWeight>("BOLD");
      static const auto fieldULTRALIGHT = clazz->getStaticField<JFontWeight>("ULTRALIGHT");
      static const auto fieldTHIN = clazz->getStaticField<JFontWeight>("THIN");
      static const auto fieldLIGHT = clazz->getStaticField<JFontWeight>("LIGHT");
      static const auto fieldMEDIUM = clazz->getStaticField<JFontWeight>("MEDIUM");
      static const auto fieldREGULAR = clazz->getStaticField<JFontWeight>("REGULAR");
      static const auto fieldSEMIBOLD = clazz->getStaticField<JFontWeight>("SEMIBOLD");
      static const auto fieldCONDENSEDBOLD = clazz->getStaticField<JFontWeight>("CONDENSEDBOLD");
      static const auto fieldCONDENSED = clazz->getStaticField<JFontWeight>("CONDENSED");
      static const auto fieldHEAVY = clazz->getStaticField<JFontWeight>("HEAVY");
      static const auto fieldBLACK = clazz->getStaticField<JFontWeight>("BLACK");
      
      switch (value) {
        case FontWeight::NORMAL:
          return clazz->getStaticFieldValue(fieldNORMAL);
        case FontWeight::BOLD:
          return clazz->getStaticFieldValue(fieldBOLD);
        case FontWeight::ULTRALIGHT:
          return clazz->getStaticFieldValue(fieldULTRALIGHT);
        case FontWeight::THIN:
          return clazz->getStaticFieldValue(fieldTHIN);
        case FontWeight::LIGHT:
          return clazz->getStaticFieldValue(fieldLIGHT);
        case FontWeight::MEDIUM:
          return clazz->getStaticFieldValue(fieldMEDIUM);
        case FontWeight::REGULAR:
          return clazz->getStaticFieldValue(fieldREGULAR);
        case FontWeight::SEMIBOLD:
          return clazz->getStaticFieldValue(fieldSEMIBOLD);
        case FontWeight::CONDENSEDBOLD:
          return clazz->getStaticFieldValue(fieldCONDENSEDBOLD);
        case FontWeight::CONDENSED:
          return clazz->getStaticFieldValue(fieldCONDENSED);
        case FontWeight::HEAVY:
          return clazz->getStaticFieldValue(fieldHEAVY);
        case FontWeight::BLACK:
          return clazz->getStaticFieldValue(fieldBLACK);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotext
