///
/// JFragment.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Fragment.hpp"

#include "FontStyle.hpp"
#include "FontWeight.hpp"
#include "JFontStyle.hpp"
#include "JFontWeight.hpp"
#include "JTextAlign.hpp"
#include "JTextDecorationLine.hpp"
#include "JTextDecorationStyle.hpp"
#include "JTextTransform.hpp"
#include "TextAlign.hpp"
#include "TextDecorationLine.hpp"
#include "TextDecorationStyle.hpp"
#include "TextTransform.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::nitrotext {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Fragment" and the the Kotlin data class "Fragment".
   */
  struct JFragment final: public jni::JavaClass<JFragment> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotext/Fragment;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Fragment by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Fragment toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldText = clazz->getField<jni::JString>("text");
      jni::local_ref<jni::JString> text = this->getFieldValue(fieldText);
      static const auto fieldSelectionColor = clazz->getField<jni::JString>("selectionColor");
      jni::local_ref<jni::JString> selectionColor = this->getFieldValue(fieldSelectionColor);
      static const auto fieldFontSize = clazz->getField<jni::JDouble>("fontSize");
      jni::local_ref<jni::JDouble> fontSize = this->getFieldValue(fieldFontSize);
      static const auto fieldFontWeight = clazz->getField<JFontWeight>("fontWeight");
      jni::local_ref<JFontWeight> fontWeight = this->getFieldValue(fieldFontWeight);
      static const auto fieldFontColor = clazz->getField<jni::JString>("fontColor");
      jni::local_ref<jni::JString> fontColor = this->getFieldValue(fieldFontColor);
      static const auto fieldFragmentBackgroundColor = clazz->getField<jni::JString>("fragmentBackgroundColor");
      jni::local_ref<jni::JString> fragmentBackgroundColor = this->getFieldValue(fieldFragmentBackgroundColor);
      static const auto fieldFontStyle = clazz->getField<JFontStyle>("fontStyle");
      jni::local_ref<JFontStyle> fontStyle = this->getFieldValue(fieldFontStyle);
      static const auto fieldFontFamily = clazz->getField<jni::JString>("fontFamily");
      jni::local_ref<jni::JString> fontFamily = this->getFieldValue(fieldFontFamily);
      static const auto fieldLineHeight = clazz->getField<jni::JDouble>("lineHeight");
      jni::local_ref<jni::JDouble> lineHeight = this->getFieldValue(fieldLineHeight);
      static const auto fieldLetterSpacing = clazz->getField<jni::JDouble>("letterSpacing");
      jni::local_ref<jni::JDouble> letterSpacing = this->getFieldValue(fieldLetterSpacing);
      static const auto fieldTextAlign = clazz->getField<JTextAlign>("textAlign");
      jni::local_ref<JTextAlign> textAlign = this->getFieldValue(fieldTextAlign);
      static const auto fieldTextTransform = clazz->getField<JTextTransform>("textTransform");
      jni::local_ref<JTextTransform> textTransform = this->getFieldValue(fieldTextTransform);
      static const auto fieldTextDecorationLine = clazz->getField<JTextDecorationLine>("textDecorationLine");
      jni::local_ref<JTextDecorationLine> textDecorationLine = this->getFieldValue(fieldTextDecorationLine);
      static const auto fieldTextDecorationColor = clazz->getField<jni::JString>("textDecorationColor");
      jni::local_ref<jni::JString> textDecorationColor = this->getFieldValue(fieldTextDecorationColor);
      static const auto fieldTextDecorationStyle = clazz->getField<JTextDecorationStyle>("textDecorationStyle");
      jni::local_ref<JTextDecorationStyle> textDecorationStyle = this->getFieldValue(fieldTextDecorationStyle);
      return Fragment(
        text != nullptr ? std::make_optional(text->toStdString()) : std::nullopt,
        selectionColor != nullptr ? std::make_optional(selectionColor->toStdString()) : std::nullopt,
        fontSize != nullptr ? std::make_optional(fontSize->value()) : std::nullopt,
        fontWeight != nullptr ? std::make_optional(fontWeight->toCpp()) : std::nullopt,
        fontColor != nullptr ? std::make_optional(fontColor->toStdString()) : std::nullopt,
        fragmentBackgroundColor != nullptr ? std::make_optional(fragmentBackgroundColor->toStdString()) : std::nullopt,
        fontStyle != nullptr ? std::make_optional(fontStyle->toCpp()) : std::nullopt,
        fontFamily != nullptr ? std::make_optional(fontFamily->toStdString()) : std::nullopt,
        lineHeight != nullptr ? std::make_optional(lineHeight->value()) : std::nullopt,
        letterSpacing != nullptr ? std::make_optional(letterSpacing->value()) : std::nullopt,
        textAlign != nullptr ? std::make_optional(textAlign->toCpp()) : std::nullopt,
        textTransform != nullptr ? std::make_optional(textTransform->toCpp()) : std::nullopt,
        textDecorationLine != nullptr ? std::make_optional(textDecorationLine->toCpp()) : std::nullopt,
        textDecorationColor != nullptr ? std::make_optional(textDecorationColor->toStdString()) : std::nullopt,
        textDecorationStyle != nullptr ? std::make_optional(textDecorationStyle->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JFragment::javaobject> fromCpp(const Fragment& value) {
      return newInstance(
        value.text.has_value() ? jni::make_jstring(value.text.value()) : nullptr,
        value.selectionColor.has_value() ? jni::make_jstring(value.selectionColor.value()) : nullptr,
        value.fontSize.has_value() ? jni::JDouble::valueOf(value.fontSize.value()) : nullptr,
        value.fontWeight.has_value() ? JFontWeight::fromCpp(value.fontWeight.value()) : nullptr,
        value.fontColor.has_value() ? jni::make_jstring(value.fontColor.value()) : nullptr,
        value.fragmentBackgroundColor.has_value() ? jni::make_jstring(value.fragmentBackgroundColor.value()) : nullptr,
        value.fontStyle.has_value() ? JFontStyle::fromCpp(value.fontStyle.value()) : nullptr,
        value.fontFamily.has_value() ? jni::make_jstring(value.fontFamily.value()) : nullptr,
        value.lineHeight.has_value() ? jni::JDouble::valueOf(value.lineHeight.value()) : nullptr,
        value.letterSpacing.has_value() ? jni::JDouble::valueOf(value.letterSpacing.value()) : nullptr,
        value.textAlign.has_value() ? JTextAlign::fromCpp(value.textAlign.value()) : nullptr,
        value.textTransform.has_value() ? JTextTransform::fromCpp(value.textTransform.value()) : nullptr,
        value.textDecorationLine.has_value() ? JTextDecorationLine::fromCpp(value.textDecorationLine.value()) : nullptr,
        value.textDecorationColor.has_value() ? jni::make_jstring(value.textDecorationColor.value()) : nullptr,
        value.textDecorationStyle.has_value() ? JTextDecorationStyle::fromCpp(value.textDecorationStyle.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrotext
