///
/// JLineBreakStrategyIOS.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "LineBreakStrategyIOS.hpp"

namespace margelo::nitro::nitrotext {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "LineBreakStrategyIOS" and the the Kotlin enum "LineBreakStrategyIOS".
   */
  struct JLineBreakStrategyIOS final: public jni::JavaClass<JLineBreakStrategyIOS> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotext/LineBreakStrategyIOS;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum LineBreakStrategyIOS.
     */
    [[maybe_unused]]
    [[nodiscard]]
    LineBreakStrategyIOS toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<LineBreakStrategyIOS>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JLineBreakStrategyIOS> fromCpp(LineBreakStrategyIOS value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldNONE = clazz->getStaticField<JLineBreakStrategyIOS>("NONE");
      static const auto fieldSTANDARD = clazz->getStaticField<JLineBreakStrategyIOS>("STANDARD");
      static const auto fieldHANGUL_WORD = clazz->getStaticField<JLineBreakStrategyIOS>("HANGUL_WORD");
      static const auto fieldPUSH_OUT = clazz->getStaticField<JLineBreakStrategyIOS>("PUSH_OUT");
      
      switch (value) {
        case LineBreakStrategyIOS::NONE:
          return clazz->getStaticFieldValue(fieldNONE);
        case LineBreakStrategyIOS::STANDARD:
          return clazz->getStaticFieldValue(fieldSTANDARD);
        case LineBreakStrategyIOS::HANGUL_WORD:
          return clazz->getStaticFieldValue(fieldHANGUL_WORD);
        case LineBreakStrategyIOS::PUSH_OUT:
          return clazz->getStaticFieldValue(fieldPUSH_OUT);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotext
