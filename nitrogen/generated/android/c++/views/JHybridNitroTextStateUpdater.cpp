///
/// JHybridNitroTextStateUpdater.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroTextStateUpdater.hpp"
#include "views/HybridNitroTextComponent.hpp"
#include <NitroModules/NitroDefines.hpp>

namespace margelo::nitro::nitrotext::views {

using namespace facebook;
using ConcreteStateData = react::ConcreteState<HybridNitroTextState>;

void JHybridNitroTextStateUpdater::updateViewProps(jni::alias_ref<jni::JClass> /* class */,
                                           jni::alias_ref<JHybridNitroTextSpec::javaobject> javaView,
                                           jni::alias_ref<JStateWrapper::javaobject> stateWrapperInterface) {
  JHybridNitroTextSpec* view = javaView->cthis();

  // Get concrete StateWrapperImpl from passed StateWrapper interface object
  jobject rawStateWrapper = stateWrapperInterface.get();
  if (!stateWrapperInterface->isInstanceOf(react::StateWrapperImpl::javaClassStatic())) {
      throw std::runtime_error("StateWrapper is not a StateWrapperImpl");
  }
  auto stateWrapper = jni::alias_ref<react::StateWrapperImpl::javaobject>{
            static_cast<react::StateWrapperImpl::javaobject>(rawStateWrapper)};

  std::shared_ptr<const react::State> state = stateWrapper->cthis()->getState();
  auto concreteState = std::dynamic_pointer_cast<const ConcreteStateData>(state);
  const HybridNitroTextState& data = concreteState->getData();
  const std::optional<HybridNitroTextProps>& maybeProps = data.getProps();
  if (!maybeProps.has_value()) {
    // Props aren't set yet!
    throw std::runtime_error("HybridNitroTextState's data doesn't contain any props!");
  }
  const HybridNitroTextProps& props = maybeProps.value();
  if (props.fragments.isDirty) {
    view->setFragments(props.fragments.value);
    // TODO: Set isDirty = false
  }
  if (props.selectable.isDirty) {
    view->setSelectable(props.selectable.value);
    // TODO: Set isDirty = false
  }
  if (props.allowFontScaling.isDirty) {
    view->setAllowFontScaling(props.allowFontScaling.value);
    // TODO: Set isDirty = false
  }
  if (props.ellipsizeMode.isDirty) {
    view->setEllipsizeMode(props.ellipsizeMode.value);
    // TODO: Set isDirty = false
  }
  if (props.numberOfLines.isDirty) {
    view->setNumberOfLines(props.numberOfLines.value);
    // TODO: Set isDirty = false
  }
  if (props.lineBreakStrategyIOS.isDirty) {
    view->setLineBreakStrategyIOS(props.lineBreakStrategyIOS.value);
    // TODO: Set isDirty = false
  }
  if (props.dynamicTypeRamp.isDirty) {
    view->setDynamicTypeRamp(props.dynamicTypeRamp.value);
    // TODO: Set isDirty = false
  }
  if (props.maxFontSizeMultiplier.isDirty) {
    view->setMaxFontSizeMultiplier(props.maxFontSizeMultiplier.value);
    // TODO: Set isDirty = false
  }
  if (props.adjustsFontSizeToFit.isDirty) {
    view->setAdjustsFontSizeToFit(props.adjustsFontSizeToFit.value);
    // TODO: Set isDirty = false
  }
  if (props.minimumFontScale.isDirty) {
    view->setMinimumFontScale(props.minimumFontScale.value);
    // TODO: Set isDirty = false
  }
  if (props.onTextLayout.isDirty) {
    view->setOnTextLayout(props.onTextLayout.value);
    // TODO: Set isDirty = false
  }
  if (props.onPress.isDirty) {
    view->setOnPress(props.onPress.value);
    // TODO: Set isDirty = false
  }
  if (props.onPressIn.isDirty) {
    view->setOnPressIn(props.onPressIn.value);
    // TODO: Set isDirty = false
  }
  if (props.onPressOut.isDirty) {
    view->setOnPressOut(props.onPressOut.value);
    // TODO: Set isDirty = false
  }
  if (props.text.isDirty) {
    view->setText(props.text.value);
    // TODO: Set isDirty = false
  }
  if (props.selectionColor.isDirty) {
    view->setSelectionColor(props.selectionColor.value);
    // TODO: Set isDirty = false
  }
  if (props.fontSize.isDirty) {
    view->setFontSize(props.fontSize.value);
    // TODO: Set isDirty = false
  }
  if (props.fontWeight.isDirty) {
    view->setFontWeight(props.fontWeight.value);
    // TODO: Set isDirty = false
  }
  if (props.fontColor.isDirty) {
    view->setFontColor(props.fontColor.value);
    // TODO: Set isDirty = false
  }
  if (props.fragmentBackgroundColor.isDirty) {
    view->setFragmentBackgroundColor(props.fragmentBackgroundColor.value);
    // TODO: Set isDirty = false
  }
  if (props.fontStyle.isDirty) {
    view->setFontStyle(props.fontStyle.value);
    // TODO: Set isDirty = false
  }
  if (props.fontFamily.isDirty) {
    view->setFontFamily(props.fontFamily.value);
    // TODO: Set isDirty = false
  }
  if (props.lineHeight.isDirty) {
    view->setLineHeight(props.lineHeight.value);
    // TODO: Set isDirty = false
  }
  if (props.letterSpacing.isDirty) {
    view->setLetterSpacing(props.letterSpacing.value);
    // TODO: Set isDirty = false
  }
  if (props.textAlign.isDirty) {
    view->setTextAlign(props.textAlign.value);
    // TODO: Set isDirty = false
  }
  if (props.textTransform.isDirty) {
    view->setTextTransform(props.textTransform.value);
    // TODO: Set isDirty = false
  }
  if (props.textDecorationLine.isDirty) {
    view->setTextDecorationLine(props.textDecorationLine.value);
    // TODO: Set isDirty = false
  }
  if (props.textDecorationColor.isDirty) {
    view->setTextDecorationColor(props.textDecorationColor.value);
    // TODO: Set isDirty = false
  }
  if (props.textDecorationStyle.isDirty) {
    view->setTextDecorationStyle(props.textDecorationStyle.value);
    // TODO: Set isDirty = false
  }

  // Update hybridRef if it changed
  if (props.hybridRef.isDirty) {
    // hybridRef changed - call it with new this
    const auto& maybeFunc = props.hybridRef.value;
    if (maybeFunc.has_value()) {
      std::shared_ptr<JHybridNitroTextSpec> shared = javaView->cthis()->shared_cast<JHybridNitroTextSpec>();
      maybeFunc.value()(shared);
    }
    // TODO: Set isDirty = false
  }
}

} // namespace margelo::nitro::nitrotext::views
