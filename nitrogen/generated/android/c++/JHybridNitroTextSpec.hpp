///
/// HybridNitroTextSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridNitroTextSpec.hpp"




namespace margelo::nitro::nitrotext {

  using namespace facebook;

  class JHybridNitroTextSpec: public jni::HybridClass<JHybridNitroTextSpec, JHybridObject>,
                              public virtual HybridNitroTextSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotext/HybridNitroTextSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridNitroTextSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridNitroTextSpec::TAG),
      HybridBase(jThis),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridNitroTextSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridNitroTextSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::optional<std::vector<Fragment>> getFragments() override;
    void setFragments(const std::optional<std::vector<Fragment>>& fragments) override;
    std::optional<bool> getSelectable() override;
    void setSelectable(std::optional<bool> selectable) override;
    std::optional<bool> getAllowFontScaling() override;
    void setAllowFontScaling(std::optional<bool> allowFontScaling) override;
    std::optional<EllipsizeMode> getEllipsizeMode() override;
    void setEllipsizeMode(std::optional<EllipsizeMode> ellipsizeMode) override;
    std::optional<double> getNumberOfLines() override;
    void setNumberOfLines(std::optional<double> numberOfLines) override;
    std::optional<LineBreakStrategyIOS> getLineBreakStrategyIOS() override;
    void setLineBreakStrategyIOS(std::optional<LineBreakStrategyIOS> lineBreakStrategyIOS) override;
    std::optional<DynamicTypeRamp> getDynamicTypeRamp() override;
    void setDynamicTypeRamp(std::optional<DynamicTypeRamp> dynamicTypeRamp) override;
    std::optional<double> getMaxFontSizeMultiplier() override;
    void setMaxFontSizeMultiplier(std::optional<double> maxFontSizeMultiplier) override;
    std::optional<bool> getAdjustsFontSizeToFit() override;
    void setAdjustsFontSizeToFit(std::optional<bool> adjustsFontSizeToFit) override;
    std::optional<double> getMinimumFontScale() override;
    void setMinimumFontScale(std::optional<double> minimumFontScale) override;
    std::optional<std::function<void(const TextLayoutEvent& /* layout */)>> getOnTextLayout() override;
    void setOnTextLayout(const std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>& onTextLayout) override;
    std::optional<std::function<void()>> getOnPress() override;
    void setOnPress(const std::optional<std::function<void()>>& onPress) override;
    std::optional<std::function<void()>> getOnPressIn() override;
    void setOnPressIn(const std::optional<std::function<void()>>& onPressIn) override;
    std::optional<std::function<void()>> getOnPressOut() override;
    void setOnPressOut(const std::optional<std::function<void()>>& onPressOut) override;
    std::optional<std::string> getText() override;
    void setText(const std::optional<std::string>& text) override;
    std::optional<std::string> getSelectionColor() override;
    void setSelectionColor(const std::optional<std::string>& selectionColor) override;
    std::optional<double> getFontSize() override;
    void setFontSize(std::optional<double> fontSize) override;
    std::optional<FontWeight> getFontWeight() override;
    void setFontWeight(std::optional<FontWeight> fontWeight) override;
    std::optional<std::string> getFontColor() override;
    void setFontColor(const std::optional<std::string>& fontColor) override;
    std::optional<std::string> getFragmentBackgroundColor() override;
    void setFragmentBackgroundColor(const std::optional<std::string>& fragmentBackgroundColor) override;
    std::optional<FontStyle> getFontStyle() override;
    void setFontStyle(std::optional<FontStyle> fontStyle) override;
    std::optional<std::string> getFontFamily() override;
    void setFontFamily(const std::optional<std::string>& fontFamily) override;
    std::optional<double> getLineHeight() override;
    void setLineHeight(std::optional<double> lineHeight) override;
    std::optional<double> getLetterSpacing() override;
    void setLetterSpacing(std::optional<double> letterSpacing) override;
    std::optional<TextAlign> getTextAlign() override;
    void setTextAlign(std::optional<TextAlign> textAlign) override;
    std::optional<TextTransform> getTextTransform() override;
    void setTextTransform(std::optional<TextTransform> textTransform) override;
    std::optional<TextDecorationLine> getTextDecorationLine() override;
    void setTextDecorationLine(std::optional<TextDecorationLine> textDecorationLine) override;
    std::optional<std::string> getTextDecorationColor() override;
    void setTextDecorationColor(const std::optional<std::string>& textDecorationColor) override;
    std::optional<TextDecorationStyle> getTextDecorationStyle() override;
    void setTextDecorationStyle(std::optional<TextDecorationStyle> textDecorationStyle) override;

  public:
    // Methods
    

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridNitroTextSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::nitrotext
