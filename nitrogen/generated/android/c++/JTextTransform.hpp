///
/// JTextTransform.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "TextTransform.hpp"

namespace margelo::nitro::nitrotext {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "TextTransform" and the the Kotlin enum "TextTransform".
   */
  struct JTextTransform final: public jni::JavaClass<JTextTransform> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotext/TextTransform;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum TextTransform.
     */
    [[maybe_unused]]
    [[nodiscard]]
    TextTransform toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<TextTransform>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JTextTransform> fromCpp(TextTransform value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldNONE = clazz->getStaticField<JTextTransform>("NONE");
      static const auto fieldUPPERCASE = clazz->getStaticField<JTextTransform>("UPPERCASE");
      static const auto fieldLOWERCASE = clazz->getStaticField<JTextTransform>("LOWERCASE");
      static const auto fieldCAPITALIZE = clazz->getStaticField<JTextTransform>("CAPITALIZE");
      
      switch (value) {
        case TextTransform::NONE:
          return clazz->getStaticFieldValue(fieldNONE);
        case TextTransform::UPPERCASE:
          return clazz->getStaticFieldValue(fieldUPPERCASE);
        case TextTransform::LOWERCASE:
          return clazz->getStaticFieldValue(fieldLOWERCASE);
        case TextTransform::CAPITALIZE:
          return clazz->getStaticFieldValue(fieldCAPITALIZE);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotext
