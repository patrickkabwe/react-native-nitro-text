///
/// HybridNitroTextSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.nitrotext

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*
import com.margelo.nitro.views.*

/**
 * A Kotlin class representing the NitroText HybridObject.
 * Implement this abstract class to create Kotlin-based instances of NitroText.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridNitroTextSpec: HybridView() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var fragments: Array<Fragment>?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var selectable: Boolean?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var allowFontScaling: Boolean?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var ellipsizeMode: EllipsizeMode?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var numberOfLines: Double?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var lineBreakStrategyIOS: LineBreakStrategyIOS?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var dynamicTypeRamp: DynamicTypeRamp?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var maxFontSizeMultiplier: Double?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var adjustsFontSizeToFit: Boolean?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var minimumFontScale: Double?
  
  abstract var onTextLayout: ((layout: TextLayoutEvent) -> Unit)?
  
  private var onTextLayout_cxx: Func_void_TextLayoutEvent?
    @Keep
    @DoNotStrip
    get() {
      return onTextLayout?.let { Func_void_TextLayoutEvent_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onTextLayout = value?.let { it }
    }
  
  abstract var onPress: (() -> Unit)?
  
  private var onPress_cxx: Func_void?
    @Keep
    @DoNotStrip
    get() {
      return onPress?.let { Func_void_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onPress = value?.let { it }
    }
  
  abstract var onPressIn: (() -> Unit)?
  
  private var onPressIn_cxx: Func_void?
    @Keep
    @DoNotStrip
    get() {
      return onPressIn?.let { Func_void_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onPressIn = value?.let { it }
    }
  
  abstract var onPressOut: (() -> Unit)?
  
  private var onPressOut_cxx: Func_void?
    @Keep
    @DoNotStrip
    get() {
      return onPressOut?.let { Func_void_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onPressOut = value?.let { it }
    }
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var text: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var selectionColor: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var fontSize: Double?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var fontWeight: FontWeight?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var fontColor: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var fragmentBackgroundColor: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var fontStyle: FontStyle?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var fontFamily: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var lineHeight: Double?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var letterSpacing: Double?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var textAlign: TextAlign?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var textTransform: TextTransform?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var textDecorationLine: TextDecorationLine?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var textDecorationColor: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var textDecorationStyle: TextDecorationStyle?

  // Methods
  

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridNitroTextSpec"
  }
}
