///
/// NitroText-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `DynamicTypeRamp` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class DynamicTypeRamp; }
// Forward declaration of `EllipsizeMode` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class EllipsizeMode; }
// Forward declaration of `FontStyle` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class FontStyle; }
// Forward declaration of `FontWeight` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class FontWeight; }
// Forward declaration of `Fragment` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct Fragment; }
// Forward declaration of `HybridNitroTextSpec` to properly resolve imports.
namespace margelo::nitro::nitrotext { class HybridNitroTextSpec; }
// Forward declaration of `LineBreakStrategyIOS` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class LineBreakStrategyIOS; }
// Forward declaration of `TextAlign` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextAlign; }
// Forward declaration of `TextDecorationLine` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextDecorationLine; }
// Forward declaration of `TextDecorationStyle` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextDecorationStyle; }
// Forward declaration of `TextLayoutEvent` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct TextLayoutEvent; }
// Forward declaration of `TextLayout` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct TextLayout; }
// Forward declaration of `TextTransform` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextTransform; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroTextSpec_cxx` to properly resolve imports.
namespace NitroText { class HybridNitroTextSpec_cxx; }

// Include C++ defined types
#include "DynamicTypeRamp.hpp"
#include "EllipsizeMode.hpp"
#include "FontStyle.hpp"
#include "FontWeight.hpp"
#include "Fragment.hpp"
#include "HybridNitroTextSpec.hpp"
#include "LineBreakStrategyIOS.hpp"
#include "TextAlign.hpp"
#include "TextDecorationLine.hpp"
#include "TextDecorationStyle.hpp"
#include "TextLayout.hpp"
#include "TextLayoutEvent.hpp"
#include "TextTransform.hpp"
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrotext::bridge::swift {

  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) noexcept {
    return std::optional<std::string>(value);
  }
  inline bool has_value_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return optional.has_value();
  }
  inline std::string get_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) noexcept {
    return std::optional<double>(value);
  }
  inline bool has_value_std__optional_double_(const std::optional<double>& optional) noexcept {
    return optional.has_value();
  }
  inline double get_std__optional_double_(const std::optional<double>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<FontWeight>
  /**
   * Specialized version of `std::optional<FontWeight>`.
   */
  using std__optional_FontWeight_ = std::optional<FontWeight>;
  inline std::optional<FontWeight> create_std__optional_FontWeight_(const FontWeight& value) noexcept {
    return std::optional<FontWeight>(value);
  }
  inline bool has_value_std__optional_FontWeight_(const std::optional<FontWeight>& optional) noexcept {
    return optional.has_value();
  }
  inline FontWeight get_std__optional_FontWeight_(const std::optional<FontWeight>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<FontStyle>
  /**
   * Specialized version of `std::optional<FontStyle>`.
   */
  using std__optional_FontStyle_ = std::optional<FontStyle>;
  inline std::optional<FontStyle> create_std__optional_FontStyle_(const FontStyle& value) noexcept {
    return std::optional<FontStyle>(value);
  }
  inline bool has_value_std__optional_FontStyle_(const std::optional<FontStyle>& optional) noexcept {
    return optional.has_value();
  }
  inline FontStyle get_std__optional_FontStyle_(const std::optional<FontStyle>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<TextAlign>
  /**
   * Specialized version of `std::optional<TextAlign>`.
   */
  using std__optional_TextAlign_ = std::optional<TextAlign>;
  inline std::optional<TextAlign> create_std__optional_TextAlign_(const TextAlign& value) noexcept {
    return std::optional<TextAlign>(value);
  }
  inline bool has_value_std__optional_TextAlign_(const std::optional<TextAlign>& optional) noexcept {
    return optional.has_value();
  }
  inline TextAlign get_std__optional_TextAlign_(const std::optional<TextAlign>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<TextTransform>
  /**
   * Specialized version of `std::optional<TextTransform>`.
   */
  using std__optional_TextTransform_ = std::optional<TextTransform>;
  inline std::optional<TextTransform> create_std__optional_TextTransform_(const TextTransform& value) noexcept {
    return std::optional<TextTransform>(value);
  }
  inline bool has_value_std__optional_TextTransform_(const std::optional<TextTransform>& optional) noexcept {
    return optional.has_value();
  }
  inline TextTransform get_std__optional_TextTransform_(const std::optional<TextTransform>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<TextDecorationLine>
  /**
   * Specialized version of `std::optional<TextDecorationLine>`.
   */
  using std__optional_TextDecorationLine_ = std::optional<TextDecorationLine>;
  inline std::optional<TextDecorationLine> create_std__optional_TextDecorationLine_(const TextDecorationLine& value) noexcept {
    return std::optional<TextDecorationLine>(value);
  }
  inline bool has_value_std__optional_TextDecorationLine_(const std::optional<TextDecorationLine>& optional) noexcept {
    return optional.has_value();
  }
  inline TextDecorationLine get_std__optional_TextDecorationLine_(const std::optional<TextDecorationLine>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<TextDecorationStyle>
  /**
   * Specialized version of `std::optional<TextDecorationStyle>`.
   */
  using std__optional_TextDecorationStyle_ = std::optional<TextDecorationStyle>;
  inline std::optional<TextDecorationStyle> create_std__optional_TextDecorationStyle_(const TextDecorationStyle& value) noexcept {
    return std::optional<TextDecorationStyle>(value);
  }
  inline bool has_value_std__optional_TextDecorationStyle_(const std::optional<TextDecorationStyle>& optional) noexcept {
    return optional.has_value();
  }
  inline TextDecorationStyle get_std__optional_TextDecorationStyle_(const std::optional<TextDecorationStyle>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::vector<Fragment>
  /**
   * Specialized version of `std::vector<Fragment>`.
   */
  using std__vector_Fragment_ = std::vector<Fragment>;
  inline std::vector<Fragment> create_std__vector_Fragment_(size_t size) noexcept {
    std::vector<Fragment> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<Fragment>>
  /**
   * Specialized version of `std::optional<std::vector<Fragment>>`.
   */
  using std__optional_std__vector_Fragment__ = std::optional<std::vector<Fragment>>;
  inline std::optional<std::vector<Fragment>> create_std__optional_std__vector_Fragment__(const std::vector<Fragment>& value) noexcept {
    return std::optional<std::vector<Fragment>>(value);
  }
  inline bool has_value_std__optional_std__vector_Fragment__(const std::optional<std::vector<Fragment>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::vector<Fragment> get_std__optional_std__vector_Fragment__(const std::optional<std::vector<Fragment>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) noexcept {
    return std::optional<bool>(value);
  }
  inline bool has_value_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return optional.has_value();
  }
  inline bool get_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<EllipsizeMode>
  /**
   * Specialized version of `std::optional<EllipsizeMode>`.
   */
  using std__optional_EllipsizeMode_ = std::optional<EllipsizeMode>;
  inline std::optional<EllipsizeMode> create_std__optional_EllipsizeMode_(const EllipsizeMode& value) noexcept {
    return std::optional<EllipsizeMode>(value);
  }
  inline bool has_value_std__optional_EllipsizeMode_(const std::optional<EllipsizeMode>& optional) noexcept {
    return optional.has_value();
  }
  inline EllipsizeMode get_std__optional_EllipsizeMode_(const std::optional<EllipsizeMode>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<LineBreakStrategyIOS>
  /**
   * Specialized version of `std::optional<LineBreakStrategyIOS>`.
   */
  using std__optional_LineBreakStrategyIOS_ = std::optional<LineBreakStrategyIOS>;
  inline std::optional<LineBreakStrategyIOS> create_std__optional_LineBreakStrategyIOS_(const LineBreakStrategyIOS& value) noexcept {
    return std::optional<LineBreakStrategyIOS>(value);
  }
  inline bool has_value_std__optional_LineBreakStrategyIOS_(const std::optional<LineBreakStrategyIOS>& optional) noexcept {
    return optional.has_value();
  }
  inline LineBreakStrategyIOS get_std__optional_LineBreakStrategyIOS_(const std::optional<LineBreakStrategyIOS>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<DynamicTypeRamp>
  /**
   * Specialized version of `std::optional<DynamicTypeRamp>`.
   */
  using std__optional_DynamicTypeRamp_ = std::optional<DynamicTypeRamp>;
  inline std::optional<DynamicTypeRamp> create_std__optional_DynamicTypeRamp_(const DynamicTypeRamp& value) noexcept {
    return std::optional<DynamicTypeRamp>(value);
  }
  inline bool has_value_std__optional_DynamicTypeRamp_(const std::optional<DynamicTypeRamp>& optional) noexcept {
    return optional.has_value();
  }
  inline DynamicTypeRamp get_std__optional_DynamicTypeRamp_(const std::optional<DynamicTypeRamp>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::vector<TextLayout>
  /**
   * Specialized version of `std::vector<TextLayout>`.
   */
  using std__vector_TextLayout_ = std::vector<TextLayout>;
  inline std::vector<TextLayout> create_std__vector_TextLayout_(size_t size) noexcept {
    std::vector<TextLayout> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::function<void(const TextLayoutEvent& /* layout */)>
  /**
   * Specialized version of `std::function<void(const TextLayoutEvent&)>`.
   */
  using Func_void_TextLayoutEvent = std::function<void(const TextLayoutEvent& /* layout */)>;
  /**
   * Wrapper class for a `std::function<void(const TextLayoutEvent& / * layout * /)>`, this can be used from Swift.
   */
  class Func_void_TextLayoutEvent_Wrapper final {
  public:
    explicit Func_void_TextLayoutEvent_Wrapper(std::function<void(const TextLayoutEvent& /* layout */)>&& func): _function(std::make_unique<std::function<void(const TextLayoutEvent& /* layout */)>>(std::move(func))) {}
    inline void call(TextLayoutEvent layout) const noexcept {
      _function->operator()(layout);
    }
  private:
    std::unique_ptr<std::function<void(const TextLayoutEvent& /* layout */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_TextLayoutEvent create_Func_void_TextLayoutEvent(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_TextLayoutEvent_Wrapper wrap_Func_void_TextLayoutEvent(Func_void_TextLayoutEvent value) noexcept {
    return Func_void_TextLayoutEvent_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const TextLayoutEvent& / * layout * /)>>`.
   */
  using std__optional_std__function_void_const_TextLayoutEvent_____layout______ = std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>;
  inline std::optional<std::function<void(const TextLayoutEvent& /* layout */)>> create_std__optional_std__function_void_const_TextLayoutEvent_____layout______(const std::function<void(const TextLayoutEvent& /* layout */)>& value) noexcept {
    return std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>(value);
  }
  inline bool has_value_std__optional_std__function_void_const_TextLayoutEvent_____layout______(const std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::function<void(const TextLayoutEvent& /* layout */)> get_std__optional_std__function_void_const_TextLayoutEvent_____layout______(const std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const noexcept {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_Wrapper wrap_Func_void(Func_void value) noexcept {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void()>>
  /**
   * Specialized version of `std::optional<std::function<void()>>`.
   */
  using std__optional_std__function_void____ = std::optional<std::function<void()>>;
  inline std::optional<std::function<void()>> create_std__optional_std__function_void____(const std::function<void()>& value) noexcept {
    return std::optional<std::function<void()>>(value);
  }
  inline bool has_value_std__optional_std__function_void____(const std::optional<std::function<void()>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::function<void()> get_std__optional_std__function_void____(const std::optional<std::function<void()>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroTextSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroTextSpec>`.
   */
  using std__shared_ptr_HybridNitroTextSpec_ = std::shared_ptr<HybridNitroTextSpec>;
  std::shared_ptr<HybridNitroTextSpec> create_std__shared_ptr_HybridNitroTextSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridNitroTextSpec_(std__shared_ptr_HybridNitroTextSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroTextSpec>
  using std__weak_ptr_HybridNitroTextSpec_ = std::weak_ptr<HybridNitroTextSpec>;
  inline std__weak_ptr_HybridNitroTextSpec_ weakify_std__shared_ptr_HybridNitroTextSpec_(const std::shared_ptr<HybridNitroTextSpec>& strong) noexcept { return strong; }

} // namespace margelo::nitro::nitrotext::bridge::swift
