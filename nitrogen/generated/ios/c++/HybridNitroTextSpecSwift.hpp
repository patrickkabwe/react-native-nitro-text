///
/// HybridNitroTextSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroTextSpec.hpp"

// Forward declaration of `HybridNitroTextSpec_cxx` to properly resolve imports.
namespace NitroText { class HybridNitroTextSpec_cxx; }

// Forward declaration of `Fragment` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct Fragment; }
// Forward declaration of `FontWeight` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class FontWeight; }
// Forward declaration of `FontStyle` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class FontStyle; }
// Forward declaration of `TextAlign` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextAlign; }
// Forward declaration of `TextTransform` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextTransform; }
// Forward declaration of `TextDecorationLine` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextDecorationLine; }
// Forward declaration of `TextDecorationStyle` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class TextDecorationStyle; }
// Forward declaration of `NitroRenderer` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class NitroRenderer; }
// Forward declaration of `RichTextStyleRule` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct RichTextStyleRule; }
// Forward declaration of `RichTextStyle` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct RichTextStyle; }
// Forward declaration of `EllipsizeMode` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class EllipsizeMode; }
// Forward declaration of `LineBreakStrategyIOS` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class LineBreakStrategyIOS; }
// Forward declaration of `DynamicTypeRamp` to properly resolve imports.
namespace margelo::nitro::nitrotext { enum class DynamicTypeRamp; }
// Forward declaration of `TextLayoutEvent` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct TextLayoutEvent; }
// Forward declaration of `TextLayout` to properly resolve imports.
namespace margelo::nitro::nitrotext { struct TextLayout; }

#include "Fragment.hpp"
#include <vector>
#include <optional>
#include <string>
#include "FontWeight.hpp"
#include "FontStyle.hpp"
#include "TextAlign.hpp"
#include "TextTransform.hpp"
#include "TextDecorationLine.hpp"
#include "TextDecorationStyle.hpp"
#include "NitroRenderer.hpp"
#include "RichTextStyleRule.hpp"
#include "RichTextStyle.hpp"
#include "EllipsizeMode.hpp"
#include "LineBreakStrategyIOS.hpp"
#include "DynamicTypeRamp.hpp"
#include "TextLayoutEvent.hpp"
#include <functional>
#include "TextLayout.hpp"

#include "NitroText-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrotext {

  /**
   * The C++ part of HybridNitroTextSpec_cxx.swift.
   *
   * HybridNitroTextSpecSwift (C++) accesses HybridNitroTextSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroTextSpec_cxx can directly inherit from the C++ class HybridNitroTextSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroTextSpecSwift: public virtual HybridNitroTextSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroTextSpecSwift(const NitroText::HybridNitroTextSpec_cxx& swiftPart):
      HybridObject(HybridNitroTextSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroText::HybridNitroTextSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline std::optional<std::vector<Fragment>> getFragments() noexcept override {
      auto __result = _swiftPart.getFragments();
      return __result;
    }
    inline void setFragments(const std::optional<std::vector<Fragment>>& fragments) noexcept override {
      _swiftPart.setFragments(fragments);
    }
    inline std::optional<NitroRenderer> getRenderer() noexcept override {
      auto __result = _swiftPart.getRenderer();
      return __result;
    }
    inline void setRenderer(std::optional<NitroRenderer> renderer) noexcept override {
      _swiftPart.setRenderer(renderer);
    }
    inline std::optional<std::vector<RichTextStyleRule>> getRichTextStyleRules() noexcept override {
      auto __result = _swiftPart.getRichTextStyleRules();
      return __result;
    }
    inline void setRichTextStyleRules(const std::optional<std::vector<RichTextStyleRule>>& richTextStyleRules) noexcept override {
      _swiftPart.setRichTextStyleRules(richTextStyleRules);
    }
    inline std::optional<bool> getSelectable() noexcept override {
      auto __result = _swiftPart.getSelectable();
      return __result;
    }
    inline void setSelectable(std::optional<bool> selectable) noexcept override {
      _swiftPart.setSelectable(selectable);
    }
    inline std::optional<bool> getAllowFontScaling() noexcept override {
      auto __result = _swiftPart.getAllowFontScaling();
      return __result;
    }
    inline void setAllowFontScaling(std::optional<bool> allowFontScaling) noexcept override {
      _swiftPart.setAllowFontScaling(allowFontScaling);
    }
    inline std::optional<EllipsizeMode> getEllipsizeMode() noexcept override {
      auto __result = _swiftPart.getEllipsizeMode();
      return __result;
    }
    inline void setEllipsizeMode(std::optional<EllipsizeMode> ellipsizeMode) noexcept override {
      _swiftPart.setEllipsizeMode(ellipsizeMode);
    }
    inline std::optional<double> getNumberOfLines() noexcept override {
      auto __result = _swiftPart.getNumberOfLines();
      return __result;
    }
    inline void setNumberOfLines(std::optional<double> numberOfLines) noexcept override {
      _swiftPart.setNumberOfLines(numberOfLines);
    }
    inline std::optional<LineBreakStrategyIOS> getLineBreakStrategyIOS() noexcept override {
      auto __result = _swiftPart.getLineBreakStrategyIOS();
      return __result;
    }
    inline void setLineBreakStrategyIOS(std::optional<LineBreakStrategyIOS> lineBreakStrategyIOS) noexcept override {
      _swiftPart.setLineBreakStrategyIOS(lineBreakStrategyIOS);
    }
    inline std::optional<DynamicTypeRamp> getDynamicTypeRamp() noexcept override {
      auto __result = _swiftPart.getDynamicTypeRamp();
      return __result;
    }
    inline void setDynamicTypeRamp(std::optional<DynamicTypeRamp> dynamicTypeRamp) noexcept override {
      _swiftPart.setDynamicTypeRamp(dynamicTypeRamp);
    }
    inline std::optional<double> getMaxFontSizeMultiplier() noexcept override {
      auto __result = _swiftPart.getMaxFontSizeMultiplier();
      return __result;
    }
    inline void setMaxFontSizeMultiplier(std::optional<double> maxFontSizeMultiplier) noexcept override {
      _swiftPart.setMaxFontSizeMultiplier(maxFontSizeMultiplier);
    }
    inline std::optional<bool> getAdjustsFontSizeToFit() noexcept override {
      auto __result = _swiftPart.getAdjustsFontSizeToFit();
      return __result;
    }
    inline void setAdjustsFontSizeToFit(std::optional<bool> adjustsFontSizeToFit) noexcept override {
      _swiftPart.setAdjustsFontSizeToFit(adjustsFontSizeToFit);
    }
    inline std::optional<double> getMinimumFontScale() noexcept override {
      auto __result = _swiftPart.getMinimumFontScale();
      return __result;
    }
    inline void setMinimumFontScale(std::optional<double> minimumFontScale) noexcept override {
      _swiftPart.setMinimumFontScale(minimumFontScale);
    }
    inline std::optional<std::function<void(const TextLayoutEvent& /* layout */)>> getOnTextLayout() noexcept override {
      auto __result = _swiftPart.getOnTextLayout();
      return __result;
    }
    inline void setOnTextLayout(const std::optional<std::function<void(const TextLayoutEvent& /* layout */)>>& onTextLayout) noexcept override {
      _swiftPart.setOnTextLayout(onTextLayout);
    }
    inline std::optional<std::function<void()>> getOnPress() noexcept override {
      auto __result = _swiftPart.getOnPress();
      return __result;
    }
    inline void setOnPress(const std::optional<std::function<void()>>& onPress) noexcept override {
      _swiftPart.setOnPress(onPress);
    }
    inline std::optional<std::function<void()>> getOnPressIn() noexcept override {
      auto __result = _swiftPart.getOnPressIn();
      return __result;
    }
    inline void setOnPressIn(const std::optional<std::function<void()>>& onPressIn) noexcept override {
      _swiftPart.setOnPressIn(onPressIn);
    }
    inline std::optional<std::function<void()>> getOnPressOut() noexcept override {
      auto __result = _swiftPart.getOnPressOut();
      return __result;
    }
    inline void setOnPressOut(const std::optional<std::function<void()>>& onPressOut) noexcept override {
      _swiftPart.setOnPressOut(onPressOut);
    }
    inline std::optional<std::string> getText() noexcept override {
      auto __result = _swiftPart.getText();
      return __result;
    }
    inline void setText(const std::optional<std::string>& text) noexcept override {
      _swiftPart.setText(text);
    }
    inline std::optional<std::string> getSelectionColor() noexcept override {
      auto __result = _swiftPart.getSelectionColor();
      return __result;
    }
    inline void setSelectionColor(const std::optional<std::string>& selectionColor) noexcept override {
      _swiftPart.setSelectionColor(selectionColor);
    }
    inline std::optional<double> getFontSize() noexcept override {
      auto __result = _swiftPart.getFontSize();
      return __result;
    }
    inline void setFontSize(std::optional<double> fontSize) noexcept override {
      _swiftPart.setFontSize(fontSize);
    }
    inline std::optional<FontWeight> getFontWeight() noexcept override {
      auto __result = _swiftPart.getFontWeight();
      return __result;
    }
    inline void setFontWeight(std::optional<FontWeight> fontWeight) noexcept override {
      _swiftPart.setFontWeight(fontWeight);
    }
    inline std::optional<std::string> getFontColor() noexcept override {
      auto __result = _swiftPart.getFontColor();
      return __result;
    }
    inline void setFontColor(const std::optional<std::string>& fontColor) noexcept override {
      _swiftPart.setFontColor(fontColor);
    }
    inline std::optional<std::string> getFragmentBackgroundColor() noexcept override {
      auto __result = _swiftPart.getFragmentBackgroundColor();
      return __result;
    }
    inline void setFragmentBackgroundColor(const std::optional<std::string>& fragmentBackgroundColor) noexcept override {
      _swiftPart.setFragmentBackgroundColor(fragmentBackgroundColor);
    }
    inline std::optional<FontStyle> getFontStyle() noexcept override {
      auto __result = _swiftPart.getFontStyle();
      return __result;
    }
    inline void setFontStyle(std::optional<FontStyle> fontStyle) noexcept override {
      _swiftPart.setFontStyle(fontStyle);
    }
    inline std::optional<std::string> getFontFamily() noexcept override {
      auto __result = _swiftPart.getFontFamily();
      return __result;
    }
    inline void setFontFamily(const std::optional<std::string>& fontFamily) noexcept override {
      _swiftPart.setFontFamily(fontFamily);
    }
    inline std::optional<double> getLineHeight() noexcept override {
      auto __result = _swiftPart.getLineHeight();
      return __result;
    }
    inline void setLineHeight(std::optional<double> lineHeight) noexcept override {
      _swiftPart.setLineHeight(lineHeight);
    }
    inline std::optional<double> getLetterSpacing() noexcept override {
      auto __result = _swiftPart.getLetterSpacing();
      return __result;
    }
    inline void setLetterSpacing(std::optional<double> letterSpacing) noexcept override {
      _swiftPart.setLetterSpacing(letterSpacing);
    }
    inline std::optional<TextAlign> getTextAlign() noexcept override {
      auto __result = _swiftPart.getTextAlign();
      return __result;
    }
    inline void setTextAlign(std::optional<TextAlign> textAlign) noexcept override {
      _swiftPart.setTextAlign(textAlign);
    }
    inline std::optional<TextTransform> getTextTransform() noexcept override {
      auto __result = _swiftPart.getTextTransform();
      return __result;
    }
    inline void setTextTransform(std::optional<TextTransform> textTransform) noexcept override {
      _swiftPart.setTextTransform(textTransform);
    }
    inline std::optional<TextDecorationLine> getTextDecorationLine() noexcept override {
      auto __result = _swiftPart.getTextDecorationLine();
      return __result;
    }
    inline void setTextDecorationLine(std::optional<TextDecorationLine> textDecorationLine) noexcept override {
      _swiftPart.setTextDecorationLine(textDecorationLine);
    }
    inline std::optional<std::string> getTextDecorationColor() noexcept override {
      auto __result = _swiftPart.getTextDecorationColor();
      return __result;
    }
    inline void setTextDecorationColor(const std::optional<std::string>& textDecorationColor) noexcept override {
      _swiftPart.setTextDecorationColor(textDecorationColor);
    }
    inline std::optional<TextDecorationStyle> getTextDecorationStyle() noexcept override {
      auto __result = _swiftPart.getTextDecorationStyle();
      return __result;
    }
    inline void setTextDecorationStyle(std::optional<TextDecorationStyle> textDecorationStyle) noexcept override {
      _swiftPart.setTextDecorationStyle(textDecorationStyle);
    }

  public:
    // Methods
    

  private:
    NitroText::HybridNitroTextSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrotext
