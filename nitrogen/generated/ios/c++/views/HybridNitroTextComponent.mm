///
/// HybridNitroTextComponent.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import "HybridNitroTextComponent.hpp"
#import <memory>
#import <react/renderer/componentregistry/ComponentDescriptorProvider.h>
#import <React/RCTViewComponentView.h>
#import <React/RCTComponentViewFactory.h>
#import <React/UIView+ComponentViewProtocol.h>
#import <NitroModules/NitroDefines.hpp>
#import <UIKit/UIKit.h>

#import "HybridNitroTextSpecSwift.hpp"
#import "NitroText-Swift-Cxx-Umbrella.hpp"

using namespace facebook;
using namespace margelo::nitro::nitrotext;
using namespace margelo::nitro::nitrotext::views;

/**
 * Represents the React Native View holder for the Nitro "NitroText" HybridView.
 */
@interface HybridNitroTextComponent: RCTViewComponentView
@end

@implementation HybridNitroTextComponent {
  std::shared_ptr<HybridNitroTextSpecSwift> _hybridView;
}

+ (void) load {
  [super load];
  [RCTComponentViewFactory.currentComponentViewFactory registerComponentViewClass:[HybridNitroTextComponent class]];
}

+ (react::ComponentDescriptorProvider) componentDescriptorProvider {
  return react::concreteComponentDescriptorProvider<HybridNitroTextComponentDescriptor>();
}

- (instancetype) init {
  if (self = [super init]) {
    std::shared_ptr<HybridNitroTextSpec> hybridView = NitroText::NitroTextAutolinking::createNitroText();
    _hybridView = std::dynamic_pointer_cast<HybridNitroTextSpecSwift>(hybridView);
    [self updateView];
  }
  return self;
}

- (void) updateView {
  // 1. Get Swift part
  NitroText::HybridNitroTextSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Get UIView*
  void* viewUnsafe = swiftPart.getView();
  UIView* view = (__bridge_transfer UIView*) viewUnsafe;

  // 3. Update RCTViewComponentView's [contentView]
  [self setContentView:view];
}

- (void) updateProps:(const std::shared_ptr<const react::Props>&)props
            oldProps:(const std::shared_ptr<const react::Props>&)oldProps {
  // 1. Downcast props
  const auto& newViewPropsConst = *std::static_pointer_cast<HybridNitroTextProps const>(props);
  auto& newViewProps = const_cast<HybridNitroTextProps&>(newViewPropsConst);
  NitroText::HybridNitroTextSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Update each prop individually
  swiftPart.beforeUpdate();

  // fragments: optional
  if (newViewProps.fragments.isDirty) {
    swiftPart.setFragments(newViewProps.fragments.value);
    newViewProps.fragments.isDirty = false;
  }
  // selectable: optional
  if (newViewProps.selectable.isDirty) {
    swiftPart.setSelectable(newViewProps.selectable.value);
    newViewProps.selectable.isDirty = false;
  }
  // allowFontScaling: optional
  if (newViewProps.allowFontScaling.isDirty) {
    swiftPart.setAllowFontScaling(newViewProps.allowFontScaling.value);
    newViewProps.allowFontScaling.isDirty = false;
  }
  // ellipsizeMode: optional
  if (newViewProps.ellipsizeMode.isDirty) {
    swiftPart.setEllipsizeMode(newViewProps.ellipsizeMode.value);
    newViewProps.ellipsizeMode.isDirty = false;
  }
  // lineBreakStrategyIOS: optional
  if (newViewProps.lineBreakStrategyIOS.isDirty) {
    swiftPart.setLineBreakStrategyIOS(newViewProps.lineBreakStrategyIOS.value);
    newViewProps.lineBreakStrategyIOS.isDirty = false;
  }
  // dynamicTypeRamp: optional
  if (newViewProps.dynamicTypeRamp.isDirty) {
    swiftPart.setDynamicTypeRamp(newViewProps.dynamicTypeRamp.value);
    newViewProps.dynamicTypeRamp.isDirty = false;
  }
  // maxFontSizeMultiplier: optional
  if (newViewProps.maxFontSizeMultiplier.isDirty) {
    swiftPart.setMaxFontSizeMultiplier(newViewProps.maxFontSizeMultiplier.value);
    newViewProps.maxFontSizeMultiplier.isDirty = false;
  }
  // adjustsFontSizeToFit: optional
  if (newViewProps.adjustsFontSizeToFit.isDirty) {
    swiftPart.setAdjustsFontSizeToFit(newViewProps.adjustsFontSizeToFit.value);
    newViewProps.adjustsFontSizeToFit.isDirty = false;
  }
  // minimumFontScale: optional
  if (newViewProps.minimumFontScale.isDirty) {
    swiftPart.setMinimumFontScale(newViewProps.minimumFontScale.value);
    newViewProps.minimumFontScale.isDirty = false;
  }
  // onSelectableTextMeasured: optional
  if (newViewProps.onSelectableTextMeasured.isDirty) {
    swiftPart.setOnSelectableTextMeasured(newViewProps.onSelectableTextMeasured.value);
    newViewProps.onSelectableTextMeasured.isDirty = false;
  }
  // text: optional
  if (newViewProps.text.isDirty) {
    swiftPart.setText(newViewProps.text.value);
    newViewProps.text.isDirty = false;
  }
  // fontSize: optional
  if (newViewProps.fontSize.isDirty) {
    swiftPart.setFontSize(newViewProps.fontSize.value);
    newViewProps.fontSize.isDirty = false;
  }
  // fontWeight: optional
  if (newViewProps.fontWeight.isDirty) {
    swiftPart.setFontWeight(newViewProps.fontWeight.value);
    newViewProps.fontWeight.isDirty = false;
  }
  // fontColor: optional
  if (newViewProps.fontColor.isDirty) {
    swiftPart.setFontColor(newViewProps.fontColor.value);
    newViewProps.fontColor.isDirty = false;
  }
  // fontStyle: optional
  if (newViewProps.fontStyle.isDirty) {
    swiftPart.setFontStyle(newViewProps.fontStyle.value);
    newViewProps.fontStyle.isDirty = false;
  }
  // lineHeight: optional
  if (newViewProps.lineHeight.isDirty) {
    swiftPart.setLineHeight(newViewProps.lineHeight.value);
    newViewProps.lineHeight.isDirty = false;
  }
  // letterSpacing: optional
  if (newViewProps.letterSpacing.isDirty) {
    swiftPart.setLetterSpacing(newViewProps.letterSpacing.value);
    newViewProps.letterSpacing.isDirty = false;
  }
  // numberOfLines: optional
  if (newViewProps.numberOfLines.isDirty) {
    swiftPart.setNumberOfLines(newViewProps.numberOfLines.value);
    newViewProps.numberOfLines.isDirty = false;
  }
  // textAlign: optional
  if (newViewProps.textAlign.isDirty) {
    swiftPart.setTextAlign(newViewProps.textAlign.value);
    newViewProps.textAlign.isDirty = false;
  }
  // textTransform: optional
  if (newViewProps.textTransform.isDirty) {
    swiftPart.setTextTransform(newViewProps.textTransform.value);
    newViewProps.textTransform.isDirty = false;
  }

  swiftPart.afterUpdate();

  // 3. Update hybridRef if it changed
  if (newViewProps.hybridRef.isDirty) {
    // hybridRef changed - call it with new this
    const auto& maybeFunc = newViewProps.hybridRef.value;
    if (maybeFunc.has_value()) {
      maybeFunc.value()(_hybridView);
    }
    newViewProps.hybridRef.isDirty = false;
  }

  // 4. Continue in base class
  [super updateProps:props oldProps:oldProps];
}

@end
