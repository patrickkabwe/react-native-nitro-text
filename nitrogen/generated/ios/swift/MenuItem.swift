///
/// MenuItem.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `MenuItem`, backed by a C++ struct.
 */
public typealias MenuItem = margelo.nitro.nitrotext.MenuItem

public extension MenuItem {
  private typealias bridge = margelo.nitro.nitrotext.bridge.swift

  /**
   * Create a new instance of `MenuItem`.
   */
  init(title: String, action: @escaping () -> Void) {
    self.init(std.string(title), { () -> bridge.Func_void in
      let __closureWrapper = Func_void(action)
      return bridge.create_Func_void(__closureWrapper.toUnsafe())
    }())
  }

  var title: String {
    @inline(__always)
    get {
      return String(self.__title)
    }
    @inline(__always)
    set {
      self.__title = std.string(newValue)
    }
  }
  
  var action: () -> Void {
    @inline(__always)
    get {
      return { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(self.__action)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }()
    }
    @inline(__always)
    set {
      self.__action = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(newValue)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
    }
  }
}
