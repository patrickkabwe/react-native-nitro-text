///
/// Fragment.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Fragment`, backed by a C++ struct.
 */
public typealias Fragment = margelo.nitro.nitrotext.Fragment

public extension Fragment {
  private typealias bridge = margelo.nitro.nitrotext.bridge.swift

  /**
   * Create a new instance of `Fragment`.
   */
  init(text: String?, fontSize: Double?, fontWeight: FontWeight?, fontColor: String?, fragmentBackgroundColor: String?, fontStyle: FontStyle?, lineHeight: Double?, letterSpacing: Double?, numberOfLines: Double?, textAlign: TextAlign?, textTransform: TextTransform?, textDecorationLine: TextDecorationLine?, textDecorationColor: String?, textDecorationStyle: TextDecorationStyle?) {
    self.init({ () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = text {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = fontSize {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_FontWeight_ in
      if let __unwrappedValue = fontWeight {
        return bridge.create_std__optional_FontWeight_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = fontColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = fragmentBackgroundColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_FontStyle_ in
      if let __unwrappedValue = fontStyle {
        return bridge.create_std__optional_FontStyle_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = lineHeight {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = letterSpacing {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = numberOfLines {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_TextAlign_ in
      if let __unwrappedValue = textAlign {
        return bridge.create_std__optional_TextAlign_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_TextTransform_ in
      if let __unwrappedValue = textTransform {
        return bridge.create_std__optional_TextTransform_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_TextDecorationLine_ in
      if let __unwrappedValue = textDecorationLine {
        return bridge.create_std__optional_TextDecorationLine_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = textDecorationColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_TextDecorationStyle_ in
      if let __unwrappedValue = textDecorationStyle {
        return bridge.create_std__optional_TextDecorationStyle_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var text: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__text) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__text)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__text = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var fontSize: Double? {
    @inline(__always)
    get {
      return self.__fontSize.value
    }
    @inline(__always)
    set {
      self.__fontSize = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var fontWeight: FontWeight? {
    @inline(__always)
    get {
      return self.__fontWeight.value
    }
    @inline(__always)
    set {
      self.__fontWeight = { () -> bridge.std__optional_FontWeight_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_FontWeight_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var fontColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__fontColor) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__fontColor)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__fontColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var fragmentBackgroundColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__fragmentBackgroundColor) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__fragmentBackgroundColor)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__fragmentBackgroundColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var fontStyle: FontStyle? {
    @inline(__always)
    get {
      return self.__fontStyle.value
    }
    @inline(__always)
    set {
      self.__fontStyle = { () -> bridge.std__optional_FontStyle_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_FontStyle_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var lineHeight: Double? {
    @inline(__always)
    get {
      return self.__lineHeight.value
    }
    @inline(__always)
    set {
      self.__lineHeight = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var letterSpacing: Double? {
    @inline(__always)
    get {
      return self.__letterSpacing.value
    }
    @inline(__always)
    set {
      self.__letterSpacing = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var numberOfLines: Double? {
    @inline(__always)
    get {
      return self.__numberOfLines.value
    }
    @inline(__always)
    set {
      self.__numberOfLines = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var textAlign: TextAlign? {
    @inline(__always)
    get {
      return self.__textAlign.value
    }
    @inline(__always)
    set {
      self.__textAlign = { () -> bridge.std__optional_TextAlign_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TextAlign_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var textTransform: TextTransform? {
    @inline(__always)
    get {
      return self.__textTransform.value
    }
    @inline(__always)
    set {
      self.__textTransform = { () -> bridge.std__optional_TextTransform_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TextTransform_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var textDecorationLine: TextDecorationLine? {
    @inline(__always)
    get {
      return self.__textDecorationLine.value
    }
    @inline(__always)
    set {
      self.__textDecorationLine = { () -> bridge.std__optional_TextDecorationLine_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TextDecorationLine_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var textDecorationColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__textDecorationColor) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__textDecorationColor)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__textDecorationColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var textDecorationStyle: TextDecorationStyle? {
    @inline(__always)
    get {
      return self.__textDecorationStyle.value
    }
    @inline(__always)
    set {
      self.__textDecorationStyle = { () -> bridge.std__optional_TextDecorationStyle_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TextDecorationStyle_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
