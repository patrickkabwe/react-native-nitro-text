///
/// TextLayout.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `TextLayout`, backed by a C++ struct.
 */
public typealias TextLayout = margelo.nitro.nitrotext.TextLayout

public extension TextLayout {
  private typealias bridge = margelo.nitro.nitrotext.bridge.swift

  /**
   * Create a new instance of `TextLayout`.
   */
  init(text: String, x: Double, y: Double, width: Double, height: Double, descender: Double, capHeight: Double, ascender: Double, xHeight: Double) {
    self.init(std.string(text), x, y, width, height, descender, capHeight, ascender, xHeight)
  }

  var text: String {
    @inline(__always)
    get {
      return String(self.__text)
    }
    @inline(__always)
    set {
      self.__text = std.string(newValue)
    }
  }
  
  var x: Double {
    @inline(__always)
    get {
      return self.__x
    }
    @inline(__always)
    set {
      self.__x = newValue
    }
  }
  
  var y: Double {
    @inline(__always)
    get {
      return self.__y
    }
    @inline(__always)
    set {
      self.__y = newValue
    }
  }
  
  var width: Double {
    @inline(__always)
    get {
      return self.__width
    }
    @inline(__always)
    set {
      self.__width = newValue
    }
  }
  
  var height: Double {
    @inline(__always)
    get {
      return self.__height
    }
    @inline(__always)
    set {
      self.__height = newValue
    }
  }
  
  var descender: Double {
    @inline(__always)
    get {
      return self.__descender
    }
    @inline(__always)
    set {
      self.__descender = newValue
    }
  }
  
  var capHeight: Double {
    @inline(__always)
    get {
      return self.__capHeight
    }
    @inline(__always)
    set {
      self.__capHeight = newValue
    }
  }
  
  var ascender: Double {
    @inline(__always)
    get {
      return self.__ascender
    }
    @inline(__always)
    set {
      self.__ascender = newValue
    }
  }
  
  var xHeight: Double {
    @inline(__always)
    get {
      return self.__xHeight
    }
    @inline(__always)
    set {
      self.__xHeight = newValue
    }
  }
}
