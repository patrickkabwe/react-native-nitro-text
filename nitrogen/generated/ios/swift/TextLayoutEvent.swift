///
/// TextLayoutEvent.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `TextLayoutEvent`, backed by a C++ struct.
 */
public typealias TextLayoutEvent = margelo.nitro.nitrotext.TextLayoutEvent

public extension TextLayoutEvent {
  private typealias bridge = margelo.nitro.nitrotext.bridge.swift

  /**
   * Create a new instance of `TextLayoutEvent`.
   */
  init(lines: [TextLayout]) {
    self.init(lines.withUnsafeBufferPointer { __pointer -> bridge.std__vector_TextLayout_ in
      return bridge.copy_std__vector_TextLayout_(__pointer.baseAddress!, lines.count)
    })
  }

  var lines: [TextLayout] {
    @inline(__always)
    get {
      return { () -> [TextLayout] in
        let __data = bridge.get_data_std__vector_TextLayout_(self.__lines)
        let __size = self.__lines.size()
        return Array(UnsafeBufferPointer(start: __data, count: __size))
      }()
    }
    @inline(__always)
    set {
      self.__lines = newValue.withUnsafeBufferPointer { __pointer -> bridge.std__vector_TextLayout_ in
        return bridge.copy_std__vector_TextLayout_(__pointer.baseAddress!, newValue.count)
      }
    }
  }
}
